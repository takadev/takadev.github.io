<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[数学覚書き]]></title>
      <url>http://devlog.site/%E6%95%B0%E5%AD%A6/mathematics/</url>
      <content type="html"><![CDATA[<h2 id="数の基礎について"><a href="#数の基礎について" class="headerlink" title="数の基礎について"></a>数の基礎について</h2><p>機械学習の勉強と切っても切り離せないのが数学…ほとんど数学については忘れてしまっていたので一から勉強し直したいと思います。まずは用語をきちんと理解しないと本を読んでもダメだなと思い、かたっぱしから調べてみました。<br><a id="more"></a></p>
<h2 id="実数"><a href="#実数" class="headerlink" title="実数"></a>実数</h2><p>実際にあると確かめた数量のことです。<br>大きく<strong>有理数</strong>と<strong>無理数</strong>に分かれます。</p>
<h3 id="有理数"><a href="#有理数" class="headerlink" title="有理数"></a>有理数</h3><p>分数で表せる数のことです。整数a, bがある場合にa分のbであらわすことができるものが有理数です。<br>有理数には整数、<strong>有限小数</strong>、<strong>循環小数</strong>が含まれます。</p>
<h4 id="有限小数"><a href="#有限小数" class="headerlink" title="有限小数"></a>有限小数</h4><p>有限小数とは終わりのある小数のことです。<br>0.3や0.45、0,99など桁が続かない終わりのある小数のことです。</p>
<h4 id="循環小数"><a href="#循環小数" class="headerlink" title="循環小数"></a>循環小数</h4><p>循環小数は有限小数とは反対に桁に終わりがなく、かつ位の続きに規則性があるもののことです。<br>例えば.0.333333…や0.12341234123412341234…などのように同じ規則性を持って繰り返す小数です。</p>
<h3 id="無理数"><a href="#無理数" class="headerlink" title="無理数"></a>無理数</h3><p>有理数とは逆に分数であわらせない数のことです。<br>具体的には循環しない<strong>無限小数</strong>が無理数にあたります。<br>例えば、円周率の3.1415926535…や平方根のルート2の1.41421356…が循環しない無限小数となり、無理数になります。</p>
<h2 id="虚数"><a href="#虚数" class="headerlink" title="虚数"></a>虚数</h2><p>虚数とは、実数ではない<strong>複素数</strong>のことです。簡単に言うと2乗した値がゼロを超えない実数になる<strong>複素数</strong>のことです。虚数はImaginary numberと言って、想像上の数です。実数は数直線上に表せたり目に見えるからわかりやすいですが、虚数は大小関係や数値線上に表すことはできません。</p>
<h2 id="虚数単位"><a href="#虚数単位" class="headerlink" title="虚数単位"></a>虚数単位</h2><p>虚数単位とは、−1の平方根である2つの数のうちの一つです。簡単に言うと2乗して-1になる数です。記号はiで表されます。</p>
<h2 id="複素数"><a href="#複素数" class="headerlink" title="複素数"></a>複素数</h2><p>実数は2乗すると必ず0以上になります。つまり、負の数の平方根は実数の範囲内には存在しない為、-1の平方根を新たな数として導入し、そこから実数より広い意味での数の体系を構築しました。これを複素数といいます。具体的にはa+biという形で表される数(a、bは実数)を複素数といい、aを実部、bを虚部といい、b≠0のとき、a+biを虚数と言います。実部と虚部の2つ(複数)から成り立つので複素数といいます。</p>
<h2 id="導関数"><a href="#導関数" class="headerlink" title="導関数"></a>導関数</h2><p>ある関数を微分して得られる関数のことです。</p>
<h2 id="等差数列"><a href="#等差数列" class="headerlink" title="等差数列"></a>等差数列</h2><p>どの隣り合う2つの項も共通して一定な差になっている数列のことです。</p>
<h2 id="漸化式-ぜんかしき"><a href="#漸化式-ぜんかしき" class="headerlink" title="漸化式(ぜんかしき)"></a>漸化式(ぜんかしき)</h2><p>数列の現在の数と次の数の関係を表す式のことです。</p>
<h2 id="二項定理"><a href="#二項定理" class="headerlink" title="二項定理"></a>二項定理</h2><p>(a＋b)^nという二つの項(a、b)をn乗で展開した式を記述するものです。</p>
<p>終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[go getについて]]></title>
      <url>http://devlog.site/Go/go5/</url>
      <content type="html"><![CDATA[<h2 id="go-getコマンドについて"><a href="#go-getコマンドについて" class="headerlink" title="go getコマンドについて"></a>go getコマンドについて</h2><p>今回は少し短いですが、go getコマンドについて調べてみたので備忘録として残しておきたいと思います。<br><a id="more"></a></p>
<h2 id="go-getの基本"><a href="#go-getの基本" class="headerlink" title="go getの基本"></a>go getの基本</h2><p>go getコマンドはgoをインストールするだけですぐに使用することができます。<br>基本的には以下のようなコマンドでパッケージをダウンロードしてくることができます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get パッケージ名</div></pre></td></tr></table></figure>
<p>go getコマンドを実行すると自動的に$GOPATH/srcへダウンロードが行われ、依存関係のあるパッケージも同時にダウンロードされます。そしてダウンロードしてきたパッケージのビルドが行われ、パッケージとして使用することができます。</p>
<h2 id="go-getのオプション"><a href="#go-getのオプション" class="headerlink" title="go getのオプション"></a>go getのオプション</h2><p>go getコマンドのオプションには、主に以下のようなものがあります。</p>
<table>
<thead>
<tr>
<th style="text-align:left">オプション</th>
<th style="text-align:left">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-d</td>
<td style="text-align:left">ダウンロードのみを行い、ビルドを行いません。</td>
</tr>
<tr>
<td style="text-align:left">-fix</td>
<td style="text-align:left">ソースコードをダウンロードするとまずfixを実行してから他の事を行うようになります。</td>
</tr>
<tr>
<td style="text-align:left">-t</td>
<td style="text-align:left">パッケージのダウンロード後、ビルド前にユニットテストの実行を行います。テストに失敗した場合はビルドを行わずに終了します。</td>
</tr>
<tr>
<td style="text-align:left">-u</td>
<td style="text-align:left">常にリポジトリの最新のコミットをダウンロードしてきます。このオプションを指定しない場合はローカルに存在しないリポジトリのみダウンロードが行われます。</td>
</tr>
<tr>
<td style="text-align:left">-v</td>
<td style="text-align:left">実行しているコマンドを表示します。</td>
</tr>
</tbody>
</table>
<p>他にもオプションがありますがここでは割愛しています。気になる方は<a href="http://golang-jp.org/cmd/go/#hdr-Go__________________________" target="_blank" rel="external">公式サイト</a>をご覧ください。</p>
<h2 id="パッケージの削除"><a href="#パッケージの削除" class="headerlink" title="パッケージの削除"></a>パッケージの削除</h2><p>go getでダウンロードしてきたパッケージを削除したいということがあると思います。そんな時はソースコードとパッケージ自体を削除するだけで問題ありません。<br>ただし依存関係があるパッケージを削除してしまうとうまく動作しなくなってしまうので注意しましょう。<br>またパッケージ管理には<a href="http://devlog.site/Go/go4/">以前の記事</a>で紹介したglideもオススメです。</p>
<p>終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Compassを使ってみた]]></title>
      <url>http://devlog.site/Compass/compass/</url>
      <content type="html"><![CDATA[<h2 id="Compassについて"><a href="#Compassについて" class="headerlink" title="Compassについて"></a>Compassについて</h2><p><a href="http://devlog.site/Sass/sass/">前回</a>Sassをインストールしてみたので今回はCompassをインストールしてみたいと思います。<br><a id="more"></a></p>
<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>環境はMacでEl Capitanです。<br>自分の為の備忘録なので悪しからず。</p>
<h2 id="Compassとは"><a href="#Compassとは" class="headerlink" title="Compassとは"></a>Compassとは</h2><p>Compassとは、オープンソースのCSSフレームワークです。Sassを使ってCSSを書く場合はCompassを併用することが一般的になっています。</p>
<h2 id="Compassのインストール"><a href="#Compassのインストール" class="headerlink" title="Compassのインストール"></a>Compassのインストール</h2><p>Sass同様にgemでインストールできます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gem install compass</div></pre></td></tr></table></figure>
<p>インストールが正常に終わったら、compassコマンドが使用できるようになっているはずです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ compass -v</div><div class="line">Compass 1.0.3 (Polaris)</div><div class="line">Copyright (c) 2008-2016 Chris Eppstein</div><div class="line">Released under the MIT License.</div><div class="line">Compass is charityware.</div><div class="line">Please make a tax deductable donation for a worthy cause: http://umdf.org/compass</div></pre></td></tr></table></figure>
<p>問題なさそうですね。</p>
<h2 id="Compass使ってみる"><a href="#Compass使ってみる" class="headerlink" title="Compass使ってみる"></a>Compass使ってみる</h2><p>早速Compassを使ってみたいと思います。<br>まずは以下のコマンドを発行するとCompass用のディレクトリや設定ファイルが作成されます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ compass create</div></pre></td></tr></table></figure>
<p>こんな感じでディレクトリとファイルが作成されるかと思います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">|--config.rb</div><div class="line">|--sass</div><div class="line">|  |--ie.scss</div><div class="line">|  |--print.scss</div><div class="line">|  |--screen.scss</div><div class="line">|--stylesheets</div><div class="line">|  |--ie.css</div><div class="line">|  |--print.css</div><div class="line">|  |--screen.css</div></pre></td></tr></table></figure>
<p>sassはsassファイルを格納するディレクトリです。コンパイルされたcssファイルはstylesheetsディレクトリに生成されます。config.rbはCompassの設定ファイルになります。</p>
<h2 id="Sassファイルの作成"><a href="#Sassファイルの作成" class="headerlink" title="Sassファイルの作成"></a>Sassファイルの作成</h2><p>ではsassディレクトリ配下にsassファイルを作成してみましょう。<br>以下のようにCompassを使用する場合は<strong>@import “compass”;</strong>とインポート文を最初に書きます。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">"compass"</span>;</div><div class="line"> </div><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">     <span class="attribute">text-decoration</span>: none;</div><div class="line">     &amp;:hover &#123;</div><div class="line">          <span class="attribute">text-decoration</span>: underline;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>次にこのsassをコンパイルしてます。<br>前回はsassコマンドでコンパイルを行いましたが、今回はcompassコマンドを使用して自動でコンパイルしてみたいと思います。</p>
<h2 id="Compassの起動"><a href="#Compassの起動" class="headerlink" title="Compassの起動"></a>Compassの起動</h2><p>以下のコマンドを発行するとsassコマンドのwatchオプションを指定した挙動と同じように自動でsassファイルを監視し、変更があるたびにコンパイルを行ってくれます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ compass watch</div><div class="line">&gt;&gt;&gt; Compass is watching for changes. Press Ctrl-C to Stop.</div><div class="line">DEPRECATION WARNING on line 87 of /Users/hoge/.rbenv/versions/2.3.3/lib/ruby/gems/2.3.0/gems/compass-core-1.0.3/stylesheets/compass/css3/_deprecated-support.scss: #&#123;&#125; interpolation near operators will be simplified</div><div class="line">in a future version of Sass. To preserve the current behavior, use quotes:</div><div class="line">....</div></pre></td></tr></table></figure>
<p>これで起動状態となり、scssファイルを更新すると自動でコンパイルが走ります。</p>
<h2 id="Mixinを利用してみる"><a href="#Mixinを利用してみる" class="headerlink" title="Mixinを利用してみる"></a>Mixinを利用してみる</h2><p>ここまでではSassと特に変わらないので便利さがいまいちわからないと思います。<br>CompassにはMixinがたくさんあり、様々な機能を提供してくれていますのでそれを使わない手はありません。</p>
<h2 id="Mixinとは"><a href="#Mixinとは" class="headerlink" title="Mixinとは"></a>Mixinとは</h2><p>そもそもMixinとは何かというと、MixinとはScss全体で再利用することができる様々なスタイルのことです。また制御構文などで動的にスタイルの構成を変えることができるものです。</p>
<p>Mixinは<strong>@include</strong>を使って次のように指定することができます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div&#123;</div><div class="line">@include opacity(.5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>これは透過を指定するopacity()というMixinです。<br>コンパイルされたcssを見てみると</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">  filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=50);</div><div class="line">  opacity: 0.5;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>各種ブラウザの差異を気にしなくて済みますね。非常に便利です。<br>これは機能の一部ですので、詳しくは<a href="http://compass-style.org/reference/compass/css3/" target="_blank" rel="external">公式サイト</a>をご覧ください。</p>
<p>終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sassを使ってみた]]></title>
      <url>http://devlog.site/Sass/sass/</url>
      <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>環境はmacです。OSはEl Capitanです。<br>rubyのインストールは<a href="http://devlog.site/anyenv/anyenv/">以前の記事</a>を参照してください。<br><a id="more"></a></p>
<h2 id="Sassとは？"><a href="#Sassとは？" class="headerlink" title="Sassとは？"></a>Sassとは？</h2><p>SASSとは、CSSを拡張するメタ言語のことです。CSSでは使えなかった変数やネスト、ループなんかもできて非常に便利です。<strong>Syntactically Awesome Style Sheets</strong>の頭文字でSassのようです。</p>
<h2 id="Sassインストール"><a href="#Sassインストール" class="headerlink" title="Sassインストール"></a>Sassインストール</h2><p>早速インストールしてみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install sass</div></pre></td></tr></table></figure>
<p>gemコマンドで一発でインストールできます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sass -v</div><div class="line">Sass 3.4.22 (Selective Steve)</div></pre></td></tr></table></figure>
<p>簡単ですね。</p>
<h2 id="Sass使ってみる"><a href="#Sass使ってみる" class="headerlink" title="Sass使ってみる"></a>Sass使ってみる</h2><p>簡単なコードを書いてみたいと思います。</p>
<h3 id="変数の定義"><a href="#変数の定義" class="headerlink" title="変数の定義"></a>変数の定義</h3><p>Sassでは変数が使えます。<br>$colorが変数で<strong>#00ccff</strong>を指定して宣言しています。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$color: #00ccff;</div><div class="line"></div><div class="line">button &#123;</div><div class="line">  color: $color;</div><div class="line">&#125;</div><div class="line">p &#123;</div><div class="line">  color: $color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ネスト"><a href="#ネスト" class="headerlink" title="ネスト"></a>ネスト</h3><p>CSSではいちいちセレクタを全て指定する必要がありましたが、Sassの場合ネストすることができるので省略できます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.article &#123;</div><div class="line">  width: 700px;</div><div class="line">  margin: 10 auto;</div><div class="line">  background-color: #069fff;</div><div class="line">  background-image: url(&quot;../img/background.png&quot;)</div><div class="line">  </div><div class="line">  .title &#123;</div><div class="line">    color: #ffffff;</div><div class="line">  &#125;</div><div class="line">  .text .name &#123;</div><div class="line">    color: #000000;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>コーディングする時も楽ですしすごく読みやすいですね。</p>
<h3 id="for文-if文"><a href="#for文-if文" class="headerlink" title="for文/if文"></a>for文/if文</h3><p>Sassではfor文やif文もかけます。制御構文の頭には<strong>@for</strong>や<strong>@if</strong>のように<strong>@</strong>をつけます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@for $i from 1 through 10 &#123;</div><div class="line">  .sample#&#123;$i&#125; &#123;</div><div class="line">    margin: &#123;</div><div class="line">      @if $i &lt;= 5 &#123;</div><div class="line">        bottom: 10px;</div><div class="line">      &#125;</div><div class="line">      @else &#123;</div><div class="line">        bottom: 20px;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>もっとたくさん便利な機能がありますが、一旦ここまでで、style.scssとしてファイルを保存しておきます。</p>
<h2 id="コンパイルする"><a href="#コンパイルする" class="headerlink" title="コンパイルする"></a>コンパイルする</h2><p>先ほど保存したstyle.scssファイルをコンパイルしてcssへ変換してみます。<br>Sassのコンパイルの仕方は手動コンパルと自動コンパイルがあります。<br>まず手動コンパイルをしてみたいと思います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass style.scss:style.css</div></pre></td></tr></table></figure>
<p>コンパイルするとstyle.cssファイルが生成されていることがわかると思います。<br>この状態だとsassを修正するたびにコマンドを発行する必要がありますが、<br>自動コンパイルを指定しておくとsassを修正すると自動的にコンパイルされcssが更新されます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass --watch style.scss:style.css</div></pre></td></tr></table></figure>
<p><strong>–watch</strong>オプションを指定するとstyle.scssが更新されるたびに自動的にコンパイルしてくれます。<br>またファイルのみではなくディレクトリを指定することができ、ディレクトリ内のscssファイルを監視してくれます。</p>
<p>終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[anyenvについて]]></title>
      <url>http://devlog.site/anyenv/anyenv/</url>
      <content type="html"><![CDATA[<h2 id="anyenvを入れてみた"><a href="#anyenvを入れてみた" class="headerlink" title="anyenvを入れてみた"></a>anyenvを入れてみた</h2><p>仕事でRailsを使って簡単なWebアプリを作ることになり、rubyは昔書いてたことがある為なし崩しに自分がやることになりました。rbenvを使ってrubyの管理を行おうと思いましたが、pyenvやndenv、rbenvと~envが増えてきたのでそれを一括管理するanyenvというのを今回使ってみました。<br><a id="more"></a></p>
<p>##　はじめに<br>環境はMacでまだEl Capitanです。<br>簡単な備忘録なんで悪しからず。</p>
<h2 id="anyenvのインストール"><a href="#anyenvのインストール" class="headerlink" title="anyenvのインストール"></a>anyenvのインストール</h2><p>まずはgitでクローンしてきます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/riywo/anyenv ~/.anyenv</div></pre></td></tr></table></figure>
<p>自分はbashがデフォルトなので.bash_profileを編集します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;export PATH=&quot;$HOME/.anyenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</div><div class="line">$ echo &apos;eval &quot;$(anyenv init -)&quot;&apos; &gt;&gt; ~/.bash_profile</div><div class="line">$ exec $SHELL -l</div></pre></td></tr></table></figure>
<p>これでインストールは終了です。簡単ですね。</p>
<h2 id="rbenvをインストールしてみる"><a href="#rbenvをインストールしてみる" class="headerlink" title="rbenvをインストールしてみる"></a>rbenvをインストールしてみる</h2><p>インストールできるenv系の一覧をまずチェックしてみましょう</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">nyenv install -l</div><div class="line">Available **envs:</div><div class="line">  Renv</div><div class="line">  crenv</div><div class="line">  denv</div><div class="line">  erlenv</div><div class="line">  exenv</div><div class="line">  goenv</div><div class="line">  hsenv</div><div class="line">  jenv</div><div class="line">  luaenv</div><div class="line">  ndenv</div><div class="line">  nenv</div><div class="line">  nodenv</div><div class="line">  phpenv</div><div class="line">  plenv</div><div class="line">  pyenv</div><div class="line">  rbenv</div><div class="line">  sbtenv</div><div class="line">  scalaenv</div><div class="line">  swiftenv</div></pre></td></tr></table></figure>
<p>こんなにたくさんあるんですね。知らなかった。<br>rbenvももちろんいますね。ではrbenvをanyenvを使ってインストールしてみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">anyenv install rbenv</div></pre></td></tr></table></figure>
<p>インストールが終わるとシェルを再起動してくれと出ます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exec $SHELL -l</div></pre></td></tr></table></figure>
<p>これでrbenvのインストールが終わります。</p>
<h2 id="rbenvでrubyをインストール"><a href="#rbenvでrubyをインストール" class="headerlink" title="rbenvでrubyをインストール"></a>rbenvでrubyをインストール</h2><p>rbenvが無事インストールできたので続いてRubyをインストールしてみます。<br>インストールできるバージョンを確認してみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">rbenv install -l</div><div class="line">Available versions:</div><div class="line">  1.8.5-p113</div><div class="line">  1.8.5-p114</div><div class="line">  1.8.5-p115</div><div class="line">  1.8.5-p231</div><div class="line">  ...</div></pre></td></tr></table></figure>
<p>今回はRuby2.3.3をインストールしてみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rbenv install 2.3.3</div></pre></td></tr></table></figure>
<p>インストールができたか確認してみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rbenv versions</div><div class="line">* system (set by /Users/hoge/.rbenv/version)</div><div class="line">  2.3.3</div></pre></td></tr></table></figure>
<p>2.3.3が入ってますね。このままだとデフォルトのrubyなのでバージョンを切り替えてみましょう。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rbenv global 2.3.3</div><div class="line">rbenv versions</div><div class="line">  system (set by /Users/hoge/.rbenv/version)</div><div class="line">* 2.3.3</div></pre></td></tr></table></figure>
<p>これでバージョンが切り替わりました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ruby -v</div><div class="line">ruby 2.3.3p222 (2016-11-21 revision 56859) [x86_64-darwin15]</div></pre></td></tr></table></figure>
<p>無事切り替わってますね。これでrubyのインストールは終了です。</p>
<p>この際env系で統一してもいいかなと思いました。<br>終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ディープラーニング用語]]></title>
      <url>http://devlog.site/%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/machine-learning2/</url>
      <content type="html"><![CDATA[<h2 id="わからない用語調べてみた"><a href="#わからない用語調べてみた" class="headerlink" title="わからない用語調べてみた"></a>わからない用語調べてみた</h2><p>先日、「ゼロから作るディープラーニング」をやっとこ読み終えました。<br>かなり面白くて勉強になりました！ディープラーニングを始めてみようって人にはめちゃめちゃオススメです。理解が浅買った箇所をもう一度読み直してみようと思ってます。<br>そんな中、分からなかった用語を調べたのでメモしておこうと思います。<br><a id="more"></a></p>
<h2 id="特徴量"><a href="#特徴量" class="headerlink" title="特徴量"></a>特徴量</h2><p>4章辺りで特徴量という言葉が出てきます。最初一瞬わからなかったんですが、前後の流れでなんとくこんな意味かなぁと思ってたらその通りでした。<br>これは文字通り特徴の量のことで、よく画像認識なんかを扱う文脈で出てきます。<br>「特徴量を記述する」とかっていう文章をたまに見かけますね。</p>
<h2 id="特徴点"><a href="#特徴点" class="headerlink" title="特徴点"></a>特徴点</h2><p>特徴量と似ていますが、こちらも画像認識の文脈で使われ、言葉通り画像内のどこに特徴があるかを点で表したものです。</p>
<h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h2><p>OpneCV自体は本の中には多分出てこなかったと思いますが、画像認識周りでこの用語も出てくるので、前提知識として調べてみました。</p>
<blockquote>
<p>OpenCV（オープンシーヴィ、英語: Open Source Computer Vision Library）とはインテルが開発・公開したオープンソースのコンピュータビジョン向けライブラリ</p>
</blockquote>
<p><a href="https://ja.wikipedia.org/wiki/OpenCV" target="_blank" rel="external">wiki引用</a></p>
<p>画像を扱う便利なオープンソースのライブラリですね。まぁこれもなんとなく想像はできますよね。</p>
<h2 id="SIFT"><a href="#SIFT" class="headerlink" title="SIFT"></a>SIFT</h2><p><strong>Scale-Invariant Feature Transform</strong>の頭文字を取ってSIFTです。<br>SIFTは画像認識のためのアルゴリズムの一つで、特徴点の検出や特徴量の記述を行います。<br>SIFTは画像の照明の変化や回転、スケール変化などに対して不変な特徴量を記述することができます。<br>その分処理コストがかなり高いそうです。多分シフトって読むと思います。</p>
<h2 id="SURF"><a href="#SURF" class="headerlink" title="SURF"></a>SURF</h2><p><strong>Speed-Up Robust Features</strong>の頭文字を取ってSURFです。<br>SURFは処理コストが高かったSIFTの改良版で、精度はSIFTに劣りますが高速にマッチングすることが可能です。<br>SIFTでは特徴点を検出する方法として、DoG画像生成や勾配ヒストグラム生成などのコストの高い計算をしていましたが、SURFは積分画像を利用することにより約10倍の高速化しています。<br>多分サーフって読むと思います。</p>
<h2 id="HOG"><a href="#HOG" class="headerlink" title="HOG"></a>HOG</h2><p><strong>Histograms of Oriented Gradients</strong>の頭文字を取ってHOGです。<br>HOGは画像を細かいグリッドに分割して、1つ1つのセルごとに方向つき輝度勾配のヒストグラムを連結したものです。メリットとしては、勾配情報をもとにしているため、異なるサイズの画像を対象としても同じサイズにリサイズすることで比較することが可能です。<br>多分ホグって読むと思います。</p>
<h2 id="回帰"><a href="#回帰" class="headerlink" title="回帰"></a>回帰</h2><p>普通の日本語ですが、よく出てくるので正確に理解しておきたいと思い調べました。</p>
<blockquote>
<p>回帰（かいき）とは一般にはもとの位置または状態に戻ること、あるいはそれを繰り返すこと。</p>
</blockquote>
<p><a href="https://ja.wikipedia.org/wiki/%E5%9B%9E%E5%B8%B0" target="_blank" rel="external">wiki引用</a></p>
<p>この回帰がつく用語としてよくロジスティック回帰分析という言葉を見かけますね。</p>
<h2 id="ロジスティック回帰分析"><a href="#ロジスティック回帰分析" class="headerlink" title="ロジスティック回帰分析"></a>ロジスティック回帰分析</h2><p>これはよく統計学やマーケティング関連の文脈で出てくる言葉で、YesかNoの二択のどちらかになるかを分析するための分析方法です。もっと言えば0か1、TrueかFalseのように2値をとる場合に有効です。線形回帰分析は量的変数を予測しますが、ロジスティック回帰分析は発生確率を予測する手法ということです。</p>
<h2 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h2><p><strong>Support Vector Machine</strong>の頭文字を取ってSVM(サポートベクターマシン)です。</p>
<blockquote>
<p>サポートベクターマシン（英: support vector machine, SVM）は、教師あり学習を用いるパターン認識モデルの一つである。分類や回帰へ適用できる。</p>
</blockquote>
<p><a href="https://ja.wikipedia.org/wiki/%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%83%99%E3%82%AF%E3%82%BF%E3%83%BC%E3%83%9E%E3%82%B7%E3%83%B3" target="_blank" rel="external">wiki引用</a></p>
<h2 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h2><p><strong>k-nearest neighbor algorithm</strong>の頭文字を取ってKNNです。<br>日本語ではk近傍法(ケイきんぼうほう)というようです。某姉貴ではない。</p>
<blockquote>
<p>基づいた分類の手法であり、パターン認識でよく使われる。最近傍探索問題の一つ。k近傍法は、インスタンスに基づく学習の一種であり、怠惰学習 (lazy learning) の一種である。その関数は局所的な近似に過ぎず、全ての計算は分類時まで後回しにされる。また、回帰分析にも使われる。</p>
</blockquote>
<p><a href="https://ja.wikipedia.org/wiki/K%E8%BF%91%E5%82%8D%E6%B3%95" target="_blank" rel="external">wiki引用</a></p>
<h2 id="ソフトマックス関数"><a href="#ソフトマックス関数" class="headerlink" title="ソフトマックス関数"></a>ソフトマックス関数</h2><p>ソフトマックス関数は活性化関数の一種で、分類問題解く場合に、出力層で用いられる関数です。一般的に分類問題を解く場合はこのソフトマックス関数が用いられるようです。</p>
<h2 id="教師データ"><a href="#教師データ" class="headerlink" title="教師データ"></a>教師データ</h2><p>機械学習を行う際の訓練用のデータのことです。単に訓練データという時もあるようです。<br>まんまですね。一応調べたので書きました。</p>
<h2 id="損失関数"><a href="#損失関数" class="headerlink" title="損失関数"></a>損失関数</h2><p>機械学習のモデルがどれだけ性能が悪いかを表す関数です。現在、教師データとどれだけ適合していないかをこの関数を通して判断することができます。有名なものに2乗和誤差や交差エントロピー誤差などがあります。</p>
<p>まだまだ調べないといけない用語がたくさんありますが、調べごとばかりしていると奥さんに怒られるので今回はこの辺で。<br>終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Glideを使ってみた]]></title>
      <url>http://devlog.site/Go/go4/</url>
      <content type="html"><![CDATA[<h2 id="Glideについて"><a href="#Glideについて" class="headerlink" title="Glideについて"></a>Glideについて</h2><p>今回はGoのパッケージマネージャーのGlideを使ってみました。<br><a id="more"></a></p>
<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>環境はmacです。GlideはGo1.5以降でないと使用できません。<br>GlideはGo1.5から追加されたVendoring機能を使用しているからです。<br>Goの環境は<a href="http://devlog.site/Go/go1/">依然の記事</a>で作成しています。</p>
<h2 id="Glide入れてみた"><a href="#Glide入れてみた" class="headerlink" title="Glide入れてみた"></a>Glide入れてみた</h2><p>Goの標準には<strong>go get</strong>という依存パッケージをダウンロードしてくれる便利なコマンドがあります。<br>ただし、<strong>go get</strong>はバージョンを指定することができないという難点があります。<br>なので今回はGlideを入れてみました。ちなみにグライド？って読むと思います。</p>
<p>まずはインストールです。Homebrewで一発です。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew install glide</div></pre></td></tr></table></figure>
<p>インストールできたか確認してみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">glide -v</div><div class="line">glide version 0.12.3</div></pre></td></tr></table></figure>
<p>無事にインストール出来てますね。<br>これで終わりです。簡単ですね。</p>
<h2 id="バージョン定義ファイルの作成"><a href="#バージョン定義ファイルの作成" class="headerlink" title="バージョン定義ファイルの作成"></a>バージョン定義ファイルの作成</h2><p>インストールができたら次にバージョン定義ファイルの作成を行います。<br>以下のコマンドで作成ができます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glide init</div></pre></td></tr></table></figure>
<p>コマンドが終了するとインポートしている外部ライブラリの一覧をglide.yamlファイルに書き出してくれます。</p>
<p>glide.yamlファイルの中身はこんな感じでそれぞれのパッケージとバージョンが記載されています。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">package: .</div><div class="line">import:</div><div class="line">- package: github.com/cpuguy83/go-md2man</div><div class="line">  version: ^1.0.6</div><div class="line">  subpackages:</div><div class="line">  - md2man</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="パッケージを取得"><a href="#パッケージを取得" class="headerlink" title="パッケージを取得"></a>パッケージを取得</h2><p>定義ファイルの作成ができたら、定義に従ってパッケージを更新します。<br>これでバージョンが固定されます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glide install</div></pre></td></tr></table></figure>
<p>実行後はvendorディレクトリが作成され、依存パッケージがダウンロード・展開されます。<br>また、glide.lockというファイルも作られ、このファイルによってバージョンが固定されます。</p>
<h2 id="パッケージの追加"><a href="#パッケージの追加" class="headerlink" title="パッケージの追加"></a>パッケージの追加</h2><p>パッケージの追加には<strong>go get</strong>の代わりに以下のコマンドを使用します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glide get github.com/xxx/xxxx</div></pre></td></tr></table></figure>
<p>このコマンドを使用すると自動的にglide.yamlの更新やvendorディレクトリへの展開を行ってくれます。</p>
<h2 id="パッケージの更新"><a href="#パッケージの更新" class="headerlink" title="パッケージの更新"></a>パッケージの更新</h2><p>パッケージにパッチが当たってバグの修正などのアップデートが行われた場合に、パッケージを更新したいことがあるかと思います。<br>その場合には以下のコマンドを叩くだけでアップデートが行えます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glide up</div></pre></td></tr></table></figure>
<p>このコマンドはglide.yamlにおいてバージョンが指定されていないパッケージのみ、最新のバージョンにアップデートしてくれます。<br>glide.yamlにバージョンを指定しているパッケージは特にアップデートは行いません。</p>
<h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><p>リスト形式で依存パッケージを表示してくれる便利コマンドやツリー形式に表示してくれるものあります。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glide list</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">glide tree</div></pre></td></tr></table></figure>
<p>終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Revelフレームワークpart2]]></title>
      <url>http://devlog.site/Go/go3/</url>
      <content type="html"><![CDATA[<h2 id="Revel入門"><a href="#Revel入門" class="headerlink" title="Revel入門"></a>Revel入門</h2><p>折角Revelフレームワークでサンプルアプリを作ったので、もう少し勉強してみようと思います。<br>フレームワークのインストールは<a href="http://devlog.site/Go/go2/">前回の記事</a>を参照して下さい。<br><a id="more"></a></p>
<h2 id="テンプレートをいじってみる"><a href="#テンプレートをいじってみる" class="headerlink" title="テンプレートをいじってみる"></a>テンプレートをいじってみる</h2><p>まずは見た目を少しいじってみたいと思います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myapp/app/views/App/Index.html</div></pre></td></tr></table></figure>
<p>viewのファイルの拡張子は.htmlなんですね。<br>中身を見てみると</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;set . "title" "Home"&#125;&#125;</div><div class="line">&#123;&#123;template "header.html" .&#125;&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span> <span class="attr">style</span>=<span class="string">"background-color:#A9F16C"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>It works!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"span6"</span>&gt;</span></div><div class="line">      &#123;&#123;template "flash.html" .&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">&#123;&#123;template "footer.html" .&#125;&#125;</div></pre></td></tr></table></figure>
<p>こんな感じになってるんですね。テンプレートエンジンはちょっとクセがありそうに見えるけどどうなんでしょう。中身を見てみましょう。</p>
<h2 id="テンプレート関数"><a href="#テンプレート関数" class="headerlink" title="テンプレート関数"></a>テンプレート関数</h2><p>Index.htmlの1行目に</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;set . &quot;title&quot; &quot;Home&quot;&#125;&#125;</div></pre></td></tr></table></figure>
<p>とありますが、これはRevelのテンプレート関数であるset関数を呼び出す構文になります。<br>これはtitleに”Home”という文字列をアサインするという意味です。<br>ただtitleはIndex.html内には見当たりません。<br>どこにあるかというと別のファイルの</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myapp/app/views/header.html</div></pre></td></tr></table></figure>
<p>になります。<br>header.htmlを見てみると<code>\{\{.title\}\}</code>と埋め込まれる箇所が用意されているのがわかりますね。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;.title&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div></pre></td></tr></table></figure>
<p>この<code>\{\{.title\}\}</code>にset関数で指定した”Home”がアサインされます。<br>ブラウザから確認するとタイトルがHomeになっていることが分かるかと思います。</p>
<p>2行目は別ファイルを読み込む処理になります。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;template &quot;header.html&quot; .&#125;&#125;</div></pre></td></tr></table></figure>
<p>こちらもテンプレート関数であるtemplate関数を呼び出す構文です。ここではheader.htmlを読み込んでいますね。こうすることでいろんなページで共通のヘッダーやフッターを1つにまとめて読み込むことができますね。</p>
<p>このようにテンプレート側からも関数を呼び出すことで色々な処理が書けそうです。<br>どんな関数があるかは<a href="https://revel.github.io/manual/templates.html" target="_blank" rel="external">こちらの公式</a>から確認することができます。</p>
<h2 id="Viewに変数をアサインしてみる"><a href="#Viewに変数をアサインしてみる" class="headerlink" title="Viewに変数をアサインしてみる"></a>Viewに変数をアサインしてみる</h2><p>テンプレート内からのアサインはset関数できますが、コントローラーからのアサインはどのようにやるのか調べてみました。<br>修正するファイルはTOPページのコントローラである</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myapp/app/controllers/app.go</div></pre></td></tr></table></figure>
<p>こちらのファイルになります。<br>app.goファイルを以下のように編集しました。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c App)</span> <span class="title">Index</span><span class="params">()</span> <span class="title">revel</span>.<span class="title">Result</span></span> &#123;</div><div class="line">	hello := <span class="string">"Hello"</span></div><div class="line">	<span class="keyword">return</span> c.Render(hello)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>これでコントローラ内からViewにhelloという変数がアサインできました。次にView側でそれを表示してみたいと思います。<br>Index.htmlに<code>\{\{.hello\}\}</code>を追加します。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;.hello&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p>ブラウザで確認するときちんとHelloと表示されていることがわかりますね。</p>
<p>終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Revelフレームワークpart1]]></title>
      <url>http://devlog.site/Go/go2/</url>
      <content type="html"><![CDATA[<h2 id="Revelフレームワークを試してみた"><a href="#Revelフレームワークを試してみた" class="headerlink" title="Revelフレームワークを試してみた"></a>Revelフレームワークを試してみた</h2><p>RevelはgoのフルスタックのWebフレームワークです。Dockerと一緒にこのRevelでできたWebアプリも引き継ぐことになったので今回は勉強の為、ローカルでチュートリアルを試してみようと思います。<br><a id="more"></a></p>
<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>goのインストールはすでに終わっています。<br><a href="http://devlog.site/Go/go1/">前回</a>、gvmでインストールしてますので、気になる方は見てみてください。</p>
<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>go getによりリポジトリからrevelをインストールします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/robfig/revel</div></pre></td></tr></table></figure>
<p>次にコマンドラインツールをインストールします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/revel/cmd/revel</div></pre></td></tr></table></figure>
<p>インストールできているか確認します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ revel version                                                                                                  </div><div class="line">~</div><div class="line">~ revel! http://revel.github.io</div><div class="line">~</div><div class="line">Version(s):</div><div class="line">   Revel v0.13.1 (2016-06-06)</div><div class="line">   go1.7 darwin/amd64</div></pre></td></tr></table></figure>
<p>バージョンの確認ができましたね。これでインストールは終わりです。</p>
<h2 id="Revelコマンド"><a href="#Revelコマンド" class="headerlink" title="Revelコマンド"></a>Revelコマンド</h2><p>Revelには6つのコマンドがあります。<br>1つ1つ見ていきましょう。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">revel new</div></pre></td></tr></table></figure>
<p>アプリケーションのスケルトンを作成します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">revel run</div></pre></td></tr></table></figure>
<p>テスト用にアプリケーションを起動します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">revel build</div></pre></td></tr></table></figure>
<p>アプリケーションをビルドします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">revel package</div></pre></td></tr></table></figure>
<p>アプリケーションをデプロイ用パッケージを作成します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">revel clean</div></pre></td></tr></table></figure>
<p>一時ファイルを削除します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">revel test</div></pre></td></tr></table></figure>
<p>テストを実行します。</p>
<h2 id="サンプルアプリを作ってみる"><a href="#サンプルアプリを作ってみる" class="headerlink" title="サンプルアプリを作ってみる"></a>サンプルアプリを作ってみる</h2><p>revelがインストールできたら早速アプリを作ってみたいと思います。<br>revelコマンドから新しくサンプルアプリを作成します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">revel new myapp</div></pre></td></tr></table></figure>
<p>$GOPATH/src/myapp にアプリケーションのスケルトンが作成されます。<br>myapp以下のディレクトリ構造はこんな感じです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">|--.gitignore</div><div class="line">|--README.md</div><div class="line">|--app</div><div class="line">|  |--controllers</div><div class="line">|  |  |--app.go</div><div class="line">|  |--init.go</div><div class="line">|  |--routes</div><div class="line">|  |  |--routes.go</div><div class="line">|  |--tmp</div><div class="line">|  |  |--main.go</div><div class="line">|  |--views</div><div class="line">|  |  |--App</div><div class="line">|  |  |  |--Index.html</div><div class="line">|  |  |--debug.html</div><div class="line">|  |  |--errors</div><div class="line">|  |  |  |--404.html</div><div class="line">|  |  |  |--500.html</div><div class="line">|  |  |--flash.html</div><div class="line">|  |  |--footer.html</div><div class="line">|  |  |--header.html</div><div class="line">|--conf</div><div class="line">|  |--app.conf</div><div class="line">|  |--routes</div><div class="line">|--messages</div><div class="line">|  |--sample.en</div><div class="line">|--public</div><div class="line">|  |--css</div><div class="line">|  |  |--bootstrap-3.3.6.min.css</div><div class="line">|  |--fonts</div><div class="line">|  |  |--glyphicons-halflings-regular.ttf</div><div class="line">|  |  |--glyphicons-halflings-regular.woff</div><div class="line">|  |  |--glyphicons-halflings-regular.woff2</div><div class="line">|  |--img</div><div class="line">|  |  |--favicon.png</div><div class="line">|  |--js</div><div class="line">|  |  |--bootstrap-3.3.6.min.js</div><div class="line">|  |  |--jquery-2.2.4.min.js</div><div class="line">|--tests</div><div class="line">|  |--apptest.go</div></pre></td></tr></table></figure>
<p>実際にアプリケーションを起動してみましょう。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">revel run myapp</div></pre></td></tr></table></figure>
<p>revelのビルトインサーバーが立ち上がるのでlocalhost:9000にアクセスしてみましょう。<br>アプリの画面が表示されると思います。</p>
<p>終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Go言語インストール]]></title>
      <url>http://devlog.site/Go/go1/</url>
      <content type="html"><![CDATA[<h2 id="Go入門"><a href="#Go入門" class="headerlink" title="Go入門"></a>Go入門</h2><p>仕事でGoを使う必要があったので、今更ながらGoを勉強してみたいと思います。<br><a id="more"></a></p>
<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>環境はMacです。自分の為の備忘録ですので悪しからず。</p>
<h2 id="gvmインストール"><a href="#gvmインストール" class="headerlink" title="gvmインストール"></a>gvmインストール</h2><p>gvmでGoの管理をしたいと思います。<br>gvmのインストールには以下を実行します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</div></pre></td></tr></table></figure>
<p>インストールが終わったらコンソールの指示に従って以下を実行します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.gvm/scripts/gvm</div></pre></td></tr></table></figure>
<p>ちゃんと動くか確認します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ gvm version</div><div class="line">Go Version Manager v1.0.22 installed at /Users/hoge/.gvm</div></pre></td></tr></table></figure>
<p>大丈夫そうですね。</p>
<h2 id="Goのインストール"><a href="#Goのインストール" class="headerlink" title="Goのインストール"></a>Goのインストール</h2><p>インストールできるバージョンの一覧を確認します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gvm listall</div><div class="line">   go1</div><div class="line">   go1.0.1</div><div class="line">   go1.0.2</div><div class="line">   go1.0.3</div><div class="line">   go1.1</div><div class="line">   go1.1.1</div><div class="line">   ...</div></pre></td></tr></table></figure>
<p>今回は1.7.4をインストールしてみたいと思います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gvm install go1.7.4</div></pre></td></tr></table></figure>
<p>と、途中でエラーが出てしまいました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ gvm install go1.7.4</div><div class="line">Downloading Go source...</div><div class="line">Installing go1.7.4...</div><div class="line"> * Compiling...</div><div class="line">ERROR: Failed to compile. Check the logs at /Users/hoge/.gvm/logs/go-go1.7.4-compile.log</div><div class="line">ERROR: Failed to use installed version</div></pre></td></tr></table></figure>
<p>エラーログの中身を確認するとgoの1.4がないって怒られている様子。<br>なので先に1.4.3をインストールしてみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gvm install go1.4.3</div></pre></td></tr></table></figure>
<p>go1.4.3は素直にインストールができました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gvm use go1.4.3</div></pre></td></tr></table></figure>
<p>バージョンを1.4.3に切り替えて再度1.7.4をインストールしてみるとソースのダウンロードに結構時間がかかりましたが、無事にインストールが終わりました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ gvm list</div><div class="line"></div><div class="line">=&gt; go1.4.3</div><div class="line">   go1.7.4</div><div class="line">   system</div></pre></td></tr></table></figure>
<p>ちゃんとインストールされていますね。<br>このままだと1.4.3になっているので1.7.3に切り替えます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gvm use go1.7.4 --default</div></pre></td></tr></table></figure>
<p>ちゃんと切り替わっていますね。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ gvm list</div><div class="line"></div><div class="line">   go1.4.3</div><div class="line">=&gt; go1.7.4</div><div class="line">   system</div></pre></td></tr></table></figure>
<p>無事Goのインストールができました。<br>この後、少しGoで遊んでみました。</p>
<h2 id="Goのimportの書き方"><a href="#Goのimportの書き方" class="headerlink" title="Goのimportの書き方"></a>Goのimportの書き方</h2><p>Goを書き始めてまず気になったimportの書き方についてです。<br>Githubからパッケージをそのままインポートできたりしてすごく便利なんですが、結構色々な書き方があるみたいなので調べてみました。</p>
<h3 id="ファイルからの相対パスで指定"><a href="#ファイルからの相対パスで指定" class="headerlink" title="ファイルからの相対パスで指定"></a>ファイルからの相対パスで指定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import &quot;./model&quot;</div></pre></td></tr></table></figure>
<h3 id="GOPATHからの絶対パスで指定"><a href="#GOPATHからの絶対パスで指定" class="headerlink" title="GOPATHからの絶対パスで指定"></a>GOPATHからの絶対パスで指定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import &quot;shorturl/model&quot;</div></pre></td></tr></table></figure>
<h3 id="グループ化して複数指定"><a href="#グループ化して複数指定" class="headerlink" title="グループ化して複数指定"></a>グループ化して複数指定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">    &quot;string&quot;</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="ドットをパッケージの前に書く"><a href="#ドットをパッケージの前に書く" class="headerlink" title="ドットをパッケージの前に書く"></a>ドットをパッケージの前に書く</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import (</div><div class="line">    . &quot;fmt&quot;</div><div class="line">    &quot;string&quot;</div><div class="line">)</div></pre></td></tr></table></figure>
<p><strong>fmt.Println(“hello world”)</strong>と書くところをドットをつけると<strong>Println(“hello world”)</strong>とパッケージ名を省略することができます。</p>
<h3 id="エイリアスを付ける"><a href="#エイリアスを付ける" class="headerlink" title="エイリアスを付ける"></a>エイリアスを付ける</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import (</div><div class="line">    f &quot;fmt&quot;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>パッケージ名の前にエイリアスを指定することで、<strong>fmt.Println(“hello world”)</strong>と書くところ<strong>f.Println(“hello world”)</strong>と書くことができます。<br>パッケージ名が同じ他のパッケージを使用したい場合などにエイリアスを指定して別名を付けてあげる場合などに使用します。</p>
<h3 id="アンダースコアをパッケージの前に書く"><a href="#アンダースコアをパッケージの前に書く" class="headerlink" title="アンダースコアをパッケージの前に書く"></a>アンダースコアをパッケージの前に書く</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import (</div><div class="line">    &quot;database&quot;</div><div class="line">    _ &quot;github.com/go-sql-driver/mysql&quot;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>対象のパッケージのinit関数だけ実行されます。<br>これはブランク識別子というもので、importした対象のパッケージと依存関係のある他のパッケージをimportするときに指定します。</p>
<p>Goについても今後少しづつ勉強していこうと思います。<br>終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ttyとptsについて]]></title>
      <url>http://devlog.site/%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/tty/</url>
      <content type="html"><![CDATA[<h2 id="ttyとptsがわからなかったので調べてみた"><a href="#ttyとptsがわからなかったので調べてみた" class="headerlink" title="ttyとptsがわからなかったので調べてみた"></a>ttyとptsがわからなかったので調べてみた</h2><p>ttyとptsについて良くわかってなかったので調べてみました。自分メモです。<br><a id="more"></a></p>
<h2 id="screenコマンド"><a href="#screenコマンド" class="headerlink" title="screenコマンド"></a>screenコマンド</h2><p>ttyとptsの前にscreenコマンドについてです。</p>
<p>そもそもttyとptsが何なのか調べたのは、このscreenコマンドでDocker for Mac のxhive環境へのログインする必要があり、その前提知識としてtty、ptsどんなものなのか知る必要があったからです。</p>
<p>で、まずscreenコマンドはというと、<br>screenコマンドは１つのターミナル上で、仮想的に複数の端末を同時にオープンして作業できるようにするコマンドです。仮想端末が開かれた状態を保ったままターミナルをログアウトできたり、後から再度ログインして、screenを呼び出すことで仮想端末の状態に復帰することができます。<br>例えば処理にすごく時間のかかる作業がある場合に仮想端末上でそれを行わせてから元のターミナルで他の作業をするなどに使えるようです。</p>
<p>結構便利なコマンドですね。全然知りませんでした…<br>このscreenコマンドでDockerのttyを指定できるようです。</p>
<h2 id="ttyコマンド"><a href="#ttyコマンド" class="headerlink" title="ttyコマンド"></a>ttyコマンド</h2><p>そしてそもそもttyとかptsってなんぞや？ってとこですが、まずttyコマンドというコマンドがあります。<br>ttyコマンドは標準入出力となっている端末デバイスの名前を表示するコマンドです。<br>テレタイプライターでttyだそうです。ttyコマンドはあまり聞きませんが、よくpsコマンドでプロセス確認する時にttyって見かけますよね。こんな感じで。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ps aux</div><div class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class="line">root     21944  0.0  0.0   4064   436 tty1     Ss+  Aug23   0:00 /sbin/mingetty /dev/tty1</div><div class="line">root     23504  0.0  0.0   4080   500 ttyS0    Ss+  Aug23   0:00 /sbin/agetty /dev/ttyS0 115200 vt100-nav</div><div class="line">...</div></pre></td></tr></table></figure>
<p>tty自体はデバイスファイルとしても存在していて、/dev/ttyにあります。<br>/dev/ttyは物理的な標準出力の端末なので、こんなこともできます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;Hello world&quot; &gt; /dev/tty</div><div class="line">Hello world</div></pre></td></tr></table></figure>
<p>/dev/ttyへ文字をリダイレクトするとスクリーンにその文字が出力されます。標準出力に文字を送ったので当たり前といば当たり前ですね。<br>ということでttyは物理できな標準出力ってことですね。</p>
<p>ちなみにptsはsshなどで繋いだ場合の仮想端末のことで、<br>sshで繋いだサーバ上でscreenコマンドで複数の仮想端末を立ち上げるとこんな風になります。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ tty</div><div class="line">/dev/pts/0</div><div class="line">$ screen</div><div class="line">$ tty</div><div class="line">/dev/pts/1</div></pre></td></tr></table></figure>
<p>screenコマンドで別の仮想端末が立ち上がったことがttyコマンドで確認できますね。<br>Dockerで起動中のコンテナにアタッチした時にscreenコマンドが使えると便利そうですね。</p>
<p>終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ニューラルネットワーク入門]]></title>
      <url>http://devlog.site/%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/neural-network1/</url>
      <content type="html"><![CDATA[<h2 id="ニューラルネットワークの実装"><a href="#ニューラルネットワークの実装" class="headerlink" title="ニューラルネットワークの実装"></a>ニューラルネットワークの実装</h2><p>今回も「ゼロから作るディープラーニング」をもとにニューラルネットワークの実装をPythonでお行いたいと思います。<br><a id="more"></a></p>
<h2 id="入力2出力3のニューラルネットワーク"><a href="#入力2出力3のニューラルネットワーク" class="headerlink" title="入力2出力3のニューラルネットワーク"></a>入力2出力3のニューラルネットワーク</h2><p>NumPyの行列計算を使用して、入力が2つ、出力が3つのニューラルネットワークを実装してみます。<br>ここではバイアスと活性化関数は一旦置いておきます。<br>Xは入力、Wは重み、Yは出力を示しています。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">In [1]: import numpy as np</div><div class="line">In [2]: X = np.array([1,2])</div><div class="line">In [3]: X.shape</div><div class="line">Out[3]: (2,)</div><div class="line">In [4]: W = np.array([[1,3,5],[2,4,6]])</div><div class="line">In [5]: print(W)</div><div class="line">[[1 3 5]</div><div class="line"> [2 4 6]]</div><div class="line">In [6]: W.shape</div><div class="line">Out[6]: (2, 3)</div><div class="line">In [7]: Y = np.dot(X, W)</div><div class="line">In [8]: print(Y)</div><div class="line">[ 5 11 17]</div></pre></td></tr></table></figure>
<p>Xの入力は2つの要素を持つ1次元配列で、重みのWが2x3の配列となり、出力Yが3つの要素を持つ1次元配列になっていることがわかります。<br>これは入力が2つで出力が3つあるニューラルネットワークになります。</p>
<h2 id="3層構造のニューラルネットワーク"><a href="#3層構造のニューラルネットワーク" class="headerlink" title="3層構造のニューラルネットワーク"></a>3層構造のニューラルネットワーク</h2><p>次にバイアスと活性化関数を考慮した3層構造のニューラルネットワークを実装してみます。<br>Bをバイアス、A1は行列の内積を示しています。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In [1]: import numpy as np</div><div class="line">In [2]: X = np.array([1.0, 0.5])</div><div class="line">In [3]: W1 = np.array([[0.1, 0.3, 0.5],[0.2, 0.4, 0.6]])</div><div class="line">In [4]: B1 = np.array([0.1, 0.2, 0.3])</div><div class="line">In [5]: X.shape</div><div class="line">Out[5]: (2,)</div><div class="line">In [6]: W1.shape</div><div class="line">Out[6]: (2, 3)</div><div class="line">In [7]: B1.shape</div><div class="line">Out[7]: (3,)</div><div class="line">In [8]: A1 = np.dot(X, W1) + B1</div></pre></td></tr></table></figure>
<p>ここまでで0層目から1層目への入力ができました。次にノード内で行われる活性化関数の実装を行いたいと思います。本に従ってシグモイド関数を使用します。<br>Z1は1層目の出力を示しています。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">In [9]: def sigmoid(x):</div><div class="line">   ...:     return 1 / (1 + np.exp(-x))</div><div class="line">   ...: </div><div class="line">In [10]: Z1 = sigmoid(A1)</div><div class="line">In [11]: print(A1)</div><div class="line">[ 0.3  0.7  1.1]</div><div class="line">In [12]: print(Z1)</div><div class="line">[ 0.57444252  0.66818777  0.75026011]</div></pre></td></tr></table></figure>
<p>次に1層目から2層目への入力を行います。<br>W2が1層目から2層目への重みで、B2がバイアス、Z1が入力、A2が内積を示しています。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">In [13]: W2 = np.array([[0.1, 0.4],[0.2, 0.5],[0.3, 0.6]])</div><div class="line">In [14]: B2 = np.array([0.1, 0.2])</div><div class="line">In [15]: Z1.shape</div><div class="line">Out[15]: (3,)</div><div class="line">In [16]: W2.shape</div><div class="line">Out[16]: (3, 2)</div><div class="line">In [17]: B2.shape</div><div class="line">Out[17]: (2,)</div><div class="line">In [18]: A2 = np.dot(Z1, W2) + B2</div><div class="line">In [19]: Z2 = sigmoid(A2)</div></pre></td></tr></table></figure>
<p>0層目から1層目に行ったこととほぼ同じですね。最後に2層目から3層目の実装です。<br>予想ができると思いますが、3層目の計算も今までの0層目から1層目、1層目から2層目と同じようなイメージです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [20]: def identity_function(x):</div><div class="line">   ....:     return x</div><div class="line">   ....: </div><div class="line">In [21]: W3 = np.array([[0.1, 0.3],[0.2, 0.4]])</div><div class="line">In [22]: B3 = np.array([0.1, 0.2])</div><div class="line">In [23]: A3 = np.dot(Z2, W3) + B3</div><div class="line">In [24]: Y = identity_function(A3)</div></pre></td></tr></table></figure>
<p>2層目の実装と少し違うところがあると思います。<br>それは<strong>identity_function()</strong>を定義して活性化関数として最後のノードに使用しているところです。<br>恒等関数と言って入力をそのまま出力する関数です。最後のノードでなぜ恒等関数を使用するかというと、問題の性質に応じてこの関数を変えて欲しいからです。<br>今回は適当なデータでサンプルを実装した為、恒等関数を使用しただけのことです。</p>
<p>終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker入門]]></title>
      <url>http://devlog.site/docker/docker2/</url>
      <content type="html"><![CDATA[<h2 id="Dockerを使ってみた"><a href="#Dockerを使ってみた" class="headerlink" title="Dockerを使ってみた"></a>Dockerを使ってみた</h2><p>業務でDocker環境を引き継いだもののDcokerはさっぱりわからないので、まずは使える環境をローカルにも作ってみました。<br><a id="more"></a></p>
<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Homebrewでもインストールできるみたいですが、今回はDocker for Macを公式サイトの手順に従ってインストールして行いたいと思います。</p>
<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p><a href="https://docs.docker.com/docker-for-mac/" target="_blank" rel="external">公式サイト</a>からインストーラをダウンロードします。<br>インストーラを起動させた際にDocker Toolboxを使用していた場合、設定などをコピーしますかと聞かれます。<br>自分はDocker Toolboxをちょろっと試したことがあったのでダイアログが出ましたが、コピーする必要はないのでNoで進めました。</p>
<h2 id="起動"><a href="#起動" class="headerlink" title="起動"></a>起動</h2><p>インストール後Docker.appをアプリケーションから起動します。<br>起動の際にVirtualBoxのバージョンが古いとアップグレードしてください。と注意されます。もし注意されたらVirtualBoxのバージョンを上げましょう。<br>起動するとメニューバーにDockerのアイコンが表示されます。</p>
<p>メニューバーのアイコンからはPreferenceの設定などができます。</p>
<h2 id="試してみる"><a href="#試してみる" class="headerlink" title="試してみる"></a>試してみる</h2><p>無事に起動できたみたいなのでターミナルからコマンドを叩いてみたいと思います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">⋊&gt; ~ docker version                                                     14:20:49</div><div class="line">Client:</div><div class="line"> Version:      1.12.3</div><div class="line"> API version:  1.24</div><div class="line"> Go version:   go1.6.3</div><div class="line"> Git commit:   6b644ec</div><div class="line"> Built:        Wed Oct 26 23:26:11 2016</div><div class="line"> OS/Arch:      darwin/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> Version:      1.12.3</div><div class="line"> API version:  1.24</div><div class="line"> Go version:   go1.6.3</div><div class="line"> Git commit:   6b644ec</div><div class="line"> Built:        Wed Oct 26 23:26:11 2016</div><div class="line"> OS/Arch:      linux/amd64</div></pre></td></tr></table></figure>
<p>これでDockerが使えるようになりましたね。</p>
<h2 id="Dockerイメージをsave-loadしてみる"><a href="#Dockerイメージをsave-loadしてみる" class="headerlink" title="Dockerイメージをsave/loadしてみる"></a>Dockerイメージをsave/loadしてみる</h2><p>Docekrイメージを別環境へ移動するやり方は調べるといくつかあるみたいですが、<br>元の環境でsaveしてからインポートしたい環境でloadするやり方を試してみたいと思います。</p>
<p>まずDockerが動いてる環境でsaveをしてtar.gzにします。<br>imagesで一覧を確認します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker images</div><div class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">mysql                latest              e571f0e3f4a6        9 months ago        385.5 MB</div></pre></td></tr></table></figure>
<p>次にsaveでイメージをtar.gzします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker save e571f0e3f4a6 &gt; image.tar</div></pre></td></tr></table></figure>
<p>移動したい環境へ作成したtarをscpなどで移動して、loadを実行します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker load &lt; image.tar</div></pre></td></tr></table></figure>
<p>loadが終わったらimagesで確認してみましょう。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker images</div><div class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">mysql                latest              e571f0e3f4a6        9 months ago        385.5 MB</div></pre></td></tr></table></figure>
<p>ちゃんとimagesの一覧に出てきましたね。これで移動ができました。<br>ちなみにexport/importというコマンドもあり、save/loadとの違いは、exportはDockerイメージのファイルシステムをまるっとtarで固めただけで、saveは親子関係やメタデータも含めて固めてくれるようです。</p>
<h2 id="mysqlコンテナを立ち上げてみる"><a href="#mysqlコンテナを立ち上げてみる" class="headerlink" title="mysqlコンテナを立ち上げてみる"></a>mysqlコンテナを立ち上げてみる</h2><p>次にmysqlコンテナを立ち上げてみたいと思います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name mysqld -e MYSQL_DATABASE= -e MYSQL_USER=root -e MYSQL_PASSWORD=secret  -e MYSQL_ROOT_PASSWORD=verysecret -d mysql</div></pre></td></tr></table></figure>
<p>mysqlの環境変数を<strong>-e</strong>で指定できるのでユーザやデータベースを指定して起動することができます。<br>ローカルからmysqlへ繋ぎにいけるか確認してみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ docker exec -it mysqld mysql -u user -pパスワード</div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 6</div><div class="line">Server version: 5.7.15 MySQL Community Server (GPL)</div><div class="line"></div><div class="line">Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure>
<p>無事に接続できましたね。<br>ちなみにローカルのmysqlコマンドを使用してもコンテナのIPを指定すれば繋ぎに行くこともできます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -hコンテナIP -u user -pパスワード</div></pre></td></tr></table></figure>
<p>コンテナのIPアドレスは以下のコマンドで確認できます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect --format &apos;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&apos; コンテナIDまたはコンテナ名</div></pre></td></tr></table></figure>
<h2 id="データの永続化"><a href="#データの永続化" class="headerlink" title="データの永続化"></a>データの永続化</h2><p>最後に気をつけないといけないのがmysqlに保存しているデータについてです。<br>コンテナ内にデータを保存する場合、コンテナ作成時に<strong>-vオプション</strong>を指定する必要があります。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name mysqld -v /var/lib/mysql -d mysql</div></pre></td></tr></table></figure>
<p>こんな感じで、<strong>-v</strong>の後に保存先のパスを指定してあげます。(-eオプションは省略してます。)<br>ただし、mysqlコンテナにデータ自体も保存してしまうとDockerの長所であるポータビリティが失われてしまいます。<br>そこでデータのみを格納するコンテナを別に作成することで、データ自体のポータビリティを保ちます。<br>適当にストレージとなるコンテナを作成します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it -v /var/lib/mysql --name strage image</div></pre></td></tr></table></figure>
<p>作成したストレージコンテナを指定してmysqlコンテナを作成しなおします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --volumes-from strage --name mysqld -d mysql</div></pre></td></tr></table></figure>
<p>これでデータを格納するコンテナとmysqlのコンテナを切り離すことができました。<br>こうしておけばデータだけを移したいときに便利ですね。</p>
<p>今後は趣味で色々と試してみたいと思います。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[行列の計算]]></title>
      <url>http://devlog.site/python/numpy2/</url>
      <content type="html"><![CDATA[<h2 id="多次元配列の計算について"><a href="#多次元配列の計算について" class="headerlink" title="多次元配列の計算について"></a>多次元配列の計算について</h2><p>引き続き「ゼロから作るディープラーニング」を読んでます。<br>多次元配列の計算について、忘れないようにメモしておきます。<br><a id="more"></a></p>
<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>環境などは<a href="http://devlog.site/python/numpy/">こちら</a>を参考にして下さい。<br>浅〜いメモなので悪しからず。</p>
<h2 id="NumPyで多次元配列を扱う"><a href="#NumPyで多次元配列を扱う" class="headerlink" title="NumPyで多次元配列を扱う"></a>NumPyで多次元配列を扱う</h2><p>NumPyで多次元の配列について諸々試してみました。<br>まずは1次元配列から</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">In [1]: import numpy as np</div><div class="line">In [2]: A = np.array([1,2,3,4])</div><div class="line">In [3]: print(A)</div><div class="line">[1 2 3 4]</div><div class="line">In [4]: np.ndim(A)</div><div class="line">Out[4]: 1</div><div class="line">In [5]: A.shape</div><div class="line">Out[5]: (4,)</div><div class="line">In [6]: A.shape[0]</div><div class="line">Out[6]: 4</div></pre></td></tr></table></figure>
<p><code>np.ndim()</code>関数で対象の配列が何次元の配列かがわかります。<br><code>A.shape</code>で配列の形状が取得できます。戻り値はどうやらタプルで返ってくるようですね。<br><code>A.shape[0]</code>とインデックスを指定してあげると対象の次元の形状が取得できるんですね。</p>
<p>次に2次元配列です。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">In [1]: import numpy as np</div><div class="line">In [2]: B = np.array([[1,2],[3,4],[5,6]])</div><div class="line">In [3]: print(B)</div><div class="line">[[1 2]</div><div class="line"> [3 4]</div><div class="line"> [5 6]]</div><div class="line">In [4]: np.ndim(B)</div><div class="line">Out[4]: 2</div><div class="line">In [5]: B.shape</div><div class="line">Out[5]: (3, 2)</div></pre></td></tr></table></figure>
<p><strong>np.ndim()</strong>が<strong>2</strong>を返していますね。それと<strong>B.shape</strong>が<strong>(3,2)</strong>になっています。<br>これで3x2の配列であることがわかりますね。<br>3x2の配列とは一つ目の次元に3つ要素があり次の次元に2つの要素があるってことですね。<br>上の式の<code>B = np.array([[1,2],[3,4],[5,6]])</code>をわかりやすく書くと</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">B = [X, Y, Z]</div><div class="line">X = [1, 2]</div><div class="line">Y = [3, 4]</div><div class="line">Z = [5, 6]</div></pre></td></tr></table></figure>
<p>こんな感じになります。まずBは3つの要素(X, Y, Z)を持っていて、X、Y、Zが<br>[1, 2]、[3, 4]、 [5, 6]の2つの要素が入った配列になっていますので3x2の配列になるんですね。</p>
<p>またこんな風にも表すことができます。</p>
<p>$$<br>\begin{bmatrix}<br>1 &amp; 2 \\<br>3 &amp; 4 \\<br>5 &amp; 6<br>\end{bmatrix}<br>$$</p>
<p>このように表記した場合の横方向の並びを行、縦方向の並びを列を呼びます。<br>ここでは1、2が1つの行、1、3、5が1つの列といった具合です。</p>
<h2 id="行列の内積"><a href="#行列の内積" class="headerlink" title="行列の内積"></a>行列の内積</h2><p>次に行列の内積についてです。<br>行列の内積の定義は<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a・b = |a||b|cosθ</div></pre></td></tr></table></figure></p>
<p>で定義されます。θは2つのベクトルの始点をそろえたときにできる「なす角」のことです。<br>内積には幾何的な意味と代数的な意味の二つの定義があり、どちらかというと物理の分野で広く聞く言葉ですね。</p>
<p>定義を見てもさっぱりだと思うので簡単に言うと「ベクトルaの長さ」と、「ベクトルbをベクトルa上に射影したものの長さ」の積で求められるものということですね。<br>イメージするのが難しいと思うので具体的な計算方法を見てみましょう。<br>Pythonで行列の内積を計算する実装です。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [1]: import numpy as np</div><div class="line">In [2]: A = np.array([[1,2],[3,4]])</div><div class="line">In [3]: B = np.array([[5,6],[7,8]])</div><div class="line">In [4]: np.dot(A, B)</div><div class="line">Out[4]: </div><div class="line">array([[19, 22],</div><div class="line">       [43, 50]])</div></pre></td></tr></table></figure>
<p>ここでは</p>
<p>$$<br>\begin{bmatrix}<br>1 &amp; 2 \\<br>3 &amp; 4<br>\end{bmatrix}<br>$$</p>
<p>と</p>
<p>$$<br>\begin{bmatrix}<br>5 &amp; 6 \\<br>7 &amp; 8<br>\end{bmatrix}<br>$$</p>
<p>という二つの行列の内積の計算を行っています。<br>内積の計算には<strong>np.dot()</strong>関数を使用します。</p>
<p>行列の内積の計算は左側の行列の行と右側の配列の列をそれぞれの要素の積とその和で求めることができます。<br>例えば1行目の1列目は<strong>1 * 5 + 2 * 7</strong>で答えが<strong>19</strong>となります。</p>
<p>計算自体は簡単ですね。内積は概念がまだまだ理解できていないので今後も詳しく調べていきたいです。<br>ということで終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[機械学習用語]]></title>
      <url>http://devlog.site/machine-learning/vocabulary1/</url>
      <content type="html"><![CDATA[<h2 id="わからない用語を調べた"><a href="#わからない用語を調べた" class="headerlink" title="わからない用語を調べた"></a>わからない用語を調べた</h2><p>ディープラーニングを勉強しているとわからない用語がまぁ〜出てきます。<br>今回はわからない用語を調べたのでそれをまとめました。<br>毎度のことながら自分用のメモです。浅くしか調べてません。すいません。</p>
<h2 id="活性化関数"><a href="#活性化関数" class="headerlink" title="活性化関数"></a>活性化関数</h2><p>入力信号の総和を出力信号に変換する関数。伝達関数ともいう。<br><a id="more"></a></p>
<blockquote>
<p>活性化関数としてはパーセプトロンが登場した頃の1950年代はステップ関数が多く、1986年のバックプロパゲーションの発表以降はシグモイド関数が最も一般的だったが、現在は ReLU（ランプ関数）の方が良いと言われる。活性化関数は単調増加関数が使われる事が多いが、必ずしもそうしなければいけないという物でもなく動径基底関数なども使われる。</p>
</blockquote>
<p>wiki引用</p>
<p>ステップ関数やシグモイド関数のこと。ディープラーニングでは結構よく出てくる用語の一つですね。</p>
<h2 id="ネイピア数"><a href="#ネイピア数" class="headerlink" title="ネイピア数"></a>ネイピア数</h2><p>数学の記号eで表す自然対数の底のことです。欧米ではオイラー数とも呼ばれるようです。<br>以下の式で表すことができ、</p>
<p>$$<br>e = \lim_{n \to \infty} (1 + \frac{1}{\ n})^n<br>$$</p>
<p>数値自体は<strong>e = 2.71828 18284 59045 23536 02874 71352 …</strong>となります。<br>この定数は、指数関数や対数関数の微分でよく使われています。<br><strong>e^x</strong>を微分すると<strong>e^x</strong>となり、<strong>loge e x</strong>を微分すると<strong>1/x</strong>となる特徴があります。</p>
<p>まぁよくわからないですが、とりあえず自然対数の底でアルファベットのeと、この程度でまずはいいと思います。今後もっと詳しく調べてみたいと思います。完全に数学です…</p>
<h2 id="ステップ関数"><a href="#ステップ関数" class="headerlink" title="ステップ関数"></a>ステップ関数</h2><blockquote>
<p>階段関数（かいだんかんすう、英: step functionまたは英: staircase function）とは、おおまかに言って、グラフが階段状になる実関数のことである。より正確には、区間上の指示関数が有限個あって、それらの線型結合で表される関数である。有限個のみの区分を持った、区分的に定数関数である関数とも表現できる。</p>
</blockquote>
<p>wiki引用</p>
<p>wikiを読んでもよくわからんですね。<br>ちょっと難しいですが、用はグラフが階段状になっていたら、それはステップ関数だってことですね。<br>で、活性化関数として昔は使われていたが、出力の値が<strong>0</strong>か<strong>1</strong>と極端だったので今は使われていないってことを覚えておけば良さそうです。</p>
<h2 id="シグモイド関数"><a href="#シグモイド関数" class="headerlink" title="シグモイド関数"></a>シグモイド関数</h2><p>活性化関数をステップ関数とすると変化が急すぎるため、ステップ関数の変化を少し滑らかにした関数。それがシグモイド関数です。<br>以下のような式で表すことができます。</p>
<p>$${\sigma_a}(x) = \frac{1}{\ 1 + e^{-ax}}$$</p>
<p>この時<code>a</code>の値を大きくすればするほどステップ関数に似たような関数になりますが、急激な変化ではなく少し滑らかな変化になります。<br>これも昔は使われていたが最近はあまり使われなくなっている活性化関数の一つと覚えておけばいいかもですね。</p>
<h2 id="線形関数"><a href="#線形関数" class="headerlink" title="線形関数"></a>線形関数</h2><p>いわゆる一次関数のような直線で表せる関数のことで、出力が入力の定数倍になるような関数です。また線形性がある関数とも言えます。<br>線形性とは、</p>
<blockquote>
<p>線型性（せんけいせい、英語: linearity）あるいは線型、線形、線状、リニア（せんけい、英語: linear、ラテン語: linearis）とは、直線そのもの、または直線のようにまっすぐな図形やそれに似た性質をもつ対象および、そのような性質を保つ変換などを指して用いられている術語である。</p>
</blockquote>
<p>wiki引用</p>
<p>簡単に直線が引ける関数ってことですね。</p>
<h2 id="非線形関数"><a href="#非線形関数" class="headerlink" title="非線形関数"></a>非線形関数</h2><p>線形関数とは逆で読んで字のごとく線形ではない、線形では表せない関数ってことですね。<br>もっと言うと直線で引けない関数ってことです。<br>ステップ関数やシグモイド関数も非線形関数の一つです。</p>
<p>これは分かりやすいですね。線形、非線形って言葉も結構よく出てきますので覚えておきましょう。</p>
<h2 id="ReLU（ランプ）関数"><a href="#ReLU（ランプ）関数" class="headerlink" title="ReLU（ランプ）関数"></a>ReLU（ランプ）関数</h2><p>ReLUでランプと読むようですね。変わってますねw</p>
<blockquote>
<p>ランプ関数（英: ramp function）とは、一変数の実関数であり、独立変数とその絶対値の平均として容易に求められる。区分線形関数。<br>この関数は工学において（DSPの理論など）応用を持つ。”ramp function”の名は、グラフの形状が傾斜路（英: ramp）に似ていることに由来する。</p>
</blockquote>
<p>wiki引用</p>
<p>この関数もwikiを読んでもちょっとよくわからないですね。<br>簡単に説明すると、入力が0を超えている場合はその値をそのまま出力して、0以下なら0を出力するといった関数です。</p>
<p>他にもたくさんありますが、一旦ここで終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[パーセプトロンについて]]></title>
      <url>http://devlog.site/%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/perceptron/</url>
      <content type="html"><![CDATA[<h2 id="パーセプトロンについて"><a href="#パーセプトロンについて" class="headerlink" title="パーセプトロンについて"></a>パーセプトロンについて</h2><p>今読んでる「ゼロから作るディープラーニング」に出てくるパーセプトロンについて調べてみました。</p>
<h2 id="パーセプトロンとは？"><a href="#パーセプトロンとは？" class="headerlink" title="パーセプトロンとは？"></a>パーセプトロンとは？</h2><p>パーセプトロンとはディープラーニングの起源にとなるアルゴリズムで、ローゼンブラットさんというアメリカの研究者によって1957年に考案されたものです。<br><a id="more"></a></p>
<p>パーセプトロンは複数の入力を受け、一つの出力を行うものです。<br>複数の入力から出力がどのような結果になるかを計算するもののことですね。</p>
<p>例えば入力がx1、x2と二つあった場合、yを出力とします。そしてこの入力のx1とx2にはそれぞれ重み付けがあり、その重みをw1、w2とします。<br>この重みはそれぞれの入力と乗算され、<code>w1x1</code>、<code>w2x2</code>と計算されます。この時yの値は以下のような計算式になります。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">y = (w1x1 + w2x2 &lt;= θ) = 0</div><div class="line">y = (w1x1 + w2x2 &gt; θ) = 1</div></pre></td></tr></table></figure>
<p>この式の<code>θ</code>は閾値であり、ある一定値を示しています。<code>w1x1 + w2x2</code>の結果がこの一定値を超えると出力は1となり、超えないと0になります。この時、閾値を超えることをニューロンが発火するなんて言ったりもします。</p>
<p>これは重みづけによってそれぞれの入力の重要性をコントロールしており、重みによって閾値を超えるかどうかが変わってくるってことですね。</p>
<h2 id="ANDゲート"><a href="#ANDゲート" class="headerlink" title="ANDゲート"></a>ANDゲート</h2><p>本の中でも紹介されているANDゲートの例ですが、分かりやすかったので自分なりにまとめてみました。</p>
<p>ANDゲートとは論理回路で使われる2つの入力から1つの出力を得る論理積のゲートです。<br>下のような図を真理値表と言って入力と出力の関係を図にしたものです。</p>
<table>
<thead>
<tr>
<th style="text-align:left">x1</th>
<th style="text-align:left">x2</th>
<th style="text-align:left">y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<p>x1とx2が1の場合のみyが1になりそれ以外は0になります。<br>これがANDゲートです。ではこのANDゲートをパーセプトロンで表すとどうなるでしょう。<br>x1、x2、yの値はすでに決まっているので残りの重み(w1、w2)と閾値(θ)の値をこの真理値表を満たすように設定してやれば良いのです。</p>
<h2 id="ANDゲートを満たす値は？"><a href="#ANDゲートを満たす値は？" class="headerlink" title="ANDゲートを満たす値は？"></a>ANDゲートを満たす値は？</h2><p>実はこのANDゲートを満たす重み(w1、w2)と閾値(θ)の組み合わせは無数にあります。<br><code>(w1, w2, θ) = (0.5, 0.5, 0.7)</code>でもいいですし<code>(w1, w2, θ) = (1.0, 1.0, 1.0)</code>でも問題ありません。考えればもっとたくさんありますし、案外簡単に見つけられますね。</p>
<h2 id="NANDゲートとORゲート"><a href="#NANDゲートとORゲート" class="headerlink" title="NANDゲートとORゲート"></a>NANDゲートとORゲート</h2><p>次に似たような問題で、NANDゲートとORゲートについても同じように考えてみましょう。<br>まずNANDゲートは以下のような真理値表になります。ANDゲートを反転させたイメージです。</p>
<table>
<thead>
<tr>
<th style="text-align:left">x1</th>
<th style="text-align:left">x2</th>
<th style="text-align:left">y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
</tr>
</tbody>
</table>
<p>NANDゲートも同様にパーセプトロンで表すとどうなるか考えてみましょう。<br>NANDゲートも結構すぐに色々な答えがあることがわかると思います。<br>例えば<code>(w1, w2, θ) = (-0.5, -0.5, -0.8)</code>とかですね。</p>
<p>次にORゲートです。ORゲートは以下のような真理値表になります。</p>
<table>
<thead>
<tr>
<th style="text-align:left">x1</th>
<th style="text-align:left">x2</th>
<th style="text-align:left">y</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<p>これも考えると結構すぐにわかりますね。</p>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>パーセプトロンの重みと閾値を自分で考えましたが、この重みと閾値をコンピュータに考えさせ、学習されることができれば機械学習ができてるってことになります。</p>
<p>また今回は本を参考に真理値表を学習データの例にしていますが、このような学習データがあればその他の分野でも重みと閾値を見つけ出すことができるはずですね。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DNSレコードについて調べてみた]]></title>
      <url>http://devlog.site/DNS/dns1/</url>
      <content type="html"><![CDATA[<h2 id="DNSレコードについて調べてみた"><a href="#DNSレコードについて調べてみた" class="headerlink" title="DNSレコードについて調べてみた"></a>DNSレコードについて調べてみた</h2><p>DNSレコードの設定をする機会があり、今まで結構なぁなぁでやっていたのでこれを機に少し調べてみました。<br>簡単なメモです。<br><a id="more"></a></p>
<h2 id="DNSレコードとは？"><a href="#DNSレコードとは？" class="headerlink" title="DNSレコードとは？"></a>DNSレコードとは？</h2><p>まずDNSレコードの前にDNSとは、名前解決、つまりIPアドレスとドメインをマッピングして相互変換するものです。</p>
<p>ではDNSレコードとは何かというと、その名前解決についての設定の記述の仕方のことです。<br>DNSレコードには種類があり、それぞれに役割があります。<br>例えば、このドメイン名はこのIPアドレスのことですよ。というドメイン名とIPアドレスをマッチンピングする設定をしておく場合はAレコードを指定します。</p>
<h2 id="DNSレコードの種類"><a href="#DNSレコードの種類" class="headerlink" title="DNSレコードの種類"></a>DNSレコードの種類</h2><p>Aレコード以外にもたくさんの種類があります。<br><a href="https://ja.wikipedia.org/wiki/DNS%E3%83%AC%E3%82%B3%E3%83%BC%E3%83%89%E3%82%BF%E3%82%A4%E3%83%97%E3%81%AE%E4%B8%80%E8%A6%A7" target="_blank" rel="external">wiki</a>を見ていただけるとわかると思いますが、まぁまぁ種類がありますね。</p>
<p>その中でも主に指定するレコードがこちらです。</p>
<table>
<thead>
<tr>
<th style="text-align:left">レコード</th>
<th style="text-align:left">意味</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">NS</td>
<td style="text-align:left">ドメインのDNSサーバ名を指定する</td>
</tr>
<tr>
<td style="text-align:left">A</td>
<td style="text-align:left">ホストのIPアドレス</td>
</tr>
<tr>
<td style="text-align:left">PTR</td>
<td style="text-align:left">IPアドレスに対するホスト名</td>
</tr>
<tr>
<td style="text-align:left">CNAME</td>
<td style="text-align:left">ホスト名のエイリアス（別名）</td>
</tr>
<tr>
<td style="text-align:left">MX</td>
<td style="text-align:left">ドメインのメール・サーバ名</td>
</tr>
<tr>
<td style="text-align:left">HINFO</td>
<td style="text-align:left">ホストの追加情報。ホストのハードウェア・ソフトウェア（OS）情報を記述する</td>
</tr>
<tr>
<td style="text-align:left">WKS</td>
<td style="text-align:left">ホストで実行されているサービス情報（Well Known Services）</td>
</tr>
<tr>
<td style="text-align:left">TXT</td>
<td style="text-align:left">ホストへのテキスト情報</td>
</tr>
</tbody>
</table>
<p>この中でもよくCNAMEレコードは結構使う気がします。CNAMEレコードはAレコードで定義されてるドメイン名と別名を定義します。<br>対象のドメイン名を別のドメインとしても扱えるようにすることができるってことですね。</p>
<p>終わり。今回はDNSレコードについて調べてみましたが、DNSについても次回以降書きたいと思います。<br>DNS自体も毎度調べてわかったと思って満足して、しばらくすると忘れてしまうので再度復習しないとなぁと思ってます。きちんと理解するのって大変。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[matplotlibを少しだけ]]></title>
      <url>http://devlog.site/python/matplotlib/</url>
      <content type="html"><![CDATA[<h2 id="matplotlibについて調べてみた"><a href="#matplotlibについて調べてみた" class="headerlink" title="matplotlibについて調べてみた"></a>matplotlibについて調べてみた</h2><p>引き続き「ゼロから作るディープラーニング」を読んでいます。<br>まだまだ序盤ですが、そこで出てきたのがmatplotlib。どんなものか調べてみました。<br>自分の為の簡単なメモですのであしからず。<br><a id="more"></a></p>
<h2 id="matplotlibとは"><a href="#matplotlibとは" class="headerlink" title="matplotlibとは"></a>matplotlibとは</h2><p>Pythonでグラフを描画するときに便利なライブラリです。<br>NumPyなどと組み合わせてデータの可視化に使われます。Pythonで機械学習やる場合は必須なライブラリみたいです。</p>
<p><a href="http://matplotlib.org/gallery.html" target="_blank" rel="external">公式のギャラリー</a>を見ると色々できる見たいですね。</p>
<h2 id="試してみた"><a href="#試してみた" class="headerlink" title="試してみた"></a>試してみた</h2><p>早速試してみた。<a href="http://devlog.site/python/numpy/">前回</a>ディープラーニングの勉強の為に環境は作ってあるので既にインストールは終わっています。</p>
<p>簡単なsin関数をグラフに描画してみました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [1]: import numpy as np</div><div class="line">In [2]: import matplotlib.py</div><div class="line">matplotlib.pylab      matplotlib.pyparsing  matplotlib.pyplot     </div><div class="line">In [2]: import matplotlib.pyplot as plt</div><div class="line">In [3]: x = np.arange(0, 6, 1)</div><div class="line">In [4]: y = np.sin(x)</div><div class="line">In [5]: plt.plot(x, y)</div><div class="line">Out[5]: [&lt;matplotlib.lines.Line2D at 0x110738e10&gt;]</div><div class="line">In [6]: plt.show()</div></pre></td></tr></table></figure>
<p><code>show()</code>を実行するとグラフが描画されます。</p>
<p>次に線グラフではなくプロットにしてみましょう。<br><code>plot()</code>の第三引数にオプションを指定できるみたいで、<code>&quot;o&quot;</code>とすることでプロットのグラフになります。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [3]: x = np.random.randn(30)</div><div class="line">In [4]: y = np.sin(x) + np.random.randn(30)</div><div class="line">In [5]: plt.plot(x, y, &quot;o&quot;)</div><div class="line">Out[5]: [&lt;matplotlib.lines.Line2D at 0x110709e48&gt;]</div><div class="line">In [6]: plt.show()</div></pre></td></tr></table></figure>
<p>簡単にグラフが描画できましたね。</p>
<h2 id="タイトルや軸にラベルをつけてみた"><a href="#タイトルや軸にラベルをつけてみた" class="headerlink" title="タイトルや軸にラベルをつけてみた"></a>タイトルや軸にラベルをつけてみた</h2><p>グラフにタイトルや軸の名前をつけることもできるみたいです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">In [1]: import numpy as np</div><div class="line">In [3]: import matplotlib.pyplot as plt</div><div class="line">In [4]: x = np.arange(0, 6, 0.1)</div><div class="line">In [5]: y1 = np.sin(x)</div><div class="line">In [6]: y2 = np.cos(x)</div><div class="line">In [7]: plt.plot(x, y1, label=&quot;sin&quot;)</div><div class="line">Out[7]: [&lt;matplotlib.lines.Line2D at 0x110723160&gt;]</div><div class="line">In [8]: plt.plot(x, y2, linestyle=&quot;--&quot;, label=&quot;cos&quot;)</div><div class="line">Out[8]: [&lt;matplotlib.lines.Line2D at 0x110723cf8&gt;]</div><div class="line">In [9]: plt.xlabel(&quot;x&quot;)</div><div class="line">Out[9]: &lt;matplotlib.text.Text at 0x10a2be0b8&gt;</div><div class="line">In [10]: plt.ylabel(&quot;y&quot;)</div><div class="line">Out[10]: &lt;matplotlib.text.Text at 0x1106e2780&gt;</div><div class="line">In [11]: plt.title(&apos;sin &amp; cos&apos;)</div><div class="line">Out[11]: &lt;matplotlib.text.Text at 0x1106f95c0&gt;</div><div class="line">In [12]: plt.legend()</div><div class="line">Out[12]: &lt;matplotlib.legend.Legend at 0x110723c18&gt;</div><div class="line">In [13]: plt.show()</div></pre></td></tr></table></figure>
<p><code>plt.savefig(&quot;イメージ名.png&quot;)</code>とすることでファイルとして保存することもできるみたいです。</p>
<h2 id="画像の読み込み"><a href="#画像の読み込み" class="headerlink" title="画像の読み込み"></a>画像の読み込み</h2><p>matplotlibのimageモジュールを使用することで画像を読み込むこともできるようです。<br>先ほど保存した画像を読み込んでみたいと思います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [29]: from matplotlib.image import imread</div><div class="line">In [30]: img = imread(&quot;イメージ名.png&quot;)</div><div class="line">In [31]: plt.imshow(img)</div><div class="line">Out[31]: &lt;matplotlib.image.AxesImage at 0x1115d0b38&gt;</div><div class="line">In [32]: plt.show()</div></pre></td></tr></table></figure>
<p>もっと複雑なことが色々できるみたいですが、一旦この辺りで終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NumPyを試してみた]]></title>
      <url>http://devlog.site/python/numpy/</url>
      <content type="html"><![CDATA[<h2 id="NumPyについて"><a href="#NumPyについて" class="headerlink" title="NumPyについて"></a>NumPyについて</h2><p>最近読み始めた「ゼロから作るDeep Learning」という本の最初にNumPyのことについて書かれていたので忘れないうちにメモしておきます。</p>
<h2 id="NumPyとは？"><a href="#NumPyとは？" class="headerlink" title="NumPyとは？"></a>NumPyとは？</h2><p>NumPyはPythonの数値計算数のためのライブラリで、高度な数学アルゴリズムや配列を操作するのに便利なメソッドが多く用意されており、その上パフォーマンスも良いという優れもののようです。<br>ディープラーニングの実装にはよく使われるそうです。<br><a id="more"></a></p>
<h2 id="Anacondaディストリビューションのインストール"><a href="#Anacondaディストリビューションのインストール" class="headerlink" title="Anacondaディストリビューションのインストール"></a>Anacondaディストリビューションのインストール</h2><p>NumPyを使うにはAnacondaディストリビューションを使うことをお進められたので、インストールしてみました。<br>pyenvでまずはインストールできる一覧を確認</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pyenv install --list</div><div class="line">...</div><div class="line">  anaconda3-2.4.1</div><div class="line">  anaconda3-2.5.0</div><div class="line">  anaconda3-4.0.0</div><div class="line">  anaconda3-4.1.0</div><div class="line">  anaconda3-4.1.1</div><div class="line">...</div></pre></td></tr></table></figure>
<p>今回は最新の3-4.1.1をインストールしました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv install anaconda3-4.1.1</div></pre></td></tr></table></figure>
<p>インストールできたか確認</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pyenv versions</div><div class="line">  system</div><div class="line">  2.7.11</div><div class="line">* 2.7.11/envs/tensorflow0.10　(set by /Users/hoge/.pyenv/version)</div><div class="line">  3.5.1</div><div class="line">  anaconda3-4.1.1</div><div class="line">  tensorflow0.10</div></pre></td></tr></table></figure>
<p>anacondaいますね。切り替えます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv global anaconda3-4.1.1</div></pre></td></tr></table></figure>
<p>これで切り替わったのでNumPyが使えますね。</p>
<h2 id="NumPyを試してみる"><a href="#NumPyを試してみる" class="headerlink" title="NumPyを試してみる"></a>NumPyを試してみる</h2><p>NumPyが使えるようになったので早速試してみましょう。<br>iPythonで対話的に確認してみました。<br><code>import nu</code>と入力した後にTABキーでnumpyがいますね</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">In [1]: import nu</div><div class="line">numba    numbers  numexpr  numpy</div></pre></td></tr></table></figure>
<p>配列の計算をしてみました。NumPyで配列を扱うには<code>array()</code>を使用します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [2]: x = np.array([1.0,2.0,3.0])</div><div class="line">In [3]: y = np.array([2.0,4.0,6.0])</div><div class="line">In [4]: x + y</div><div class="line">Out[4]: array([ 3.,  6.,  9.])</div><div class="line">In [5]: x * y</div><div class="line">Out[5]: array([  2.,   8.,  18.])</div></pre></td></tr></table></figure>
<p>配列の要素数が同じ時はそれぞれの格要素同士で計算が行われるようです。<br>要素数が違う場合はエラーになってしまします。</p>
<h2 id="ブロードキャスト"><a href="#ブロードキャスト" class="headerlink" title="ブロードキャスト"></a>ブロードキャスト</h2><p>先ほど、配列の計算は要素数が同じものでないとエラーになると書きましたが、例外もあります。ブロードキャストという機能があり、形状が異なる配列同士でも計算を行うことができます。</p>
<p>例えばこんな計算はできます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [6]: A = np.array([[1,2],[3,4]])</div><div class="line">In [7]: A * 10</div><div class="line">Out[7]: </div><div class="line">array([[10, 20],</div><div class="line">       [30, 40]])</div></pre></td></tr></table></figure>
<p>2次元配列のAに対してスカラ値の10を掛け合わせています。<br>この場合はブロードキャスト機能により、スカラ値の10が2x2の要素に自動的に拡大されて<code>[[10,10],[10,10]]</code>として計算されています。</p>
<h2 id="要素へのアクセス"><a href="#要素へのアクセス" class="headerlink" title="要素へのアクセス"></a>要素へのアクセス</h2><p>要素へのアクセスにはインデックスを指定します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [8]: B = np.array([[51,50],[9,10],[0,4]])</div><div class="line">In [10]: print(B[0][0])</div><div class="line">51</div><div class="line">In [11]: print(B[0][1])</div><div class="line">50</div></pre></td></tr></table></figure>
<h2 id="条件を指定して要素へアクセス"><a href="#条件を指定して要素へアクセス" class="headerlink" title="条件を指定して要素へアクセス"></a>条件を指定して要素へアクセス</h2><p>先ほどのBを1次元配列にします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [19]: B = np.array([[51,50],[9,10],[0,4]])</div><div class="line">In [20]: B = B.flatten()</div><div class="line">In [21]: print(B)</div><div class="line">[51 50  9 10  0  4]</div></pre></td></tr></table></figure>
<p><code>flatten()</code>を使用すると多次元配列を1次元配列へ変換することができます。<br>この状態でBの要素の中で15より大きいものを取り出してみましょう。<br>インデックスに<code>B&gt;15</code>を指定します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">In [22]: B[B&gt;15]</div><div class="line">Out[22]: array([51, 50])</div></pre></td></tr></table></figure>
<p><code>B&gt;15</code>という式は15より大きい値の場合True、それ以外はFalseになるbooleanの配列を示しており、それをBのインデックスに指定することでTrueが指定された要素を取り出していることになります。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">In [23]: B&gt;15</div><div class="line">Out[23]: array([ True,  True, False, False, False, False], dtype=bool)</div></pre></td></tr></table></figure>
<h2 id="ndarrayオブジェクト"><a href="#ndarrayオブジェクト" class="headerlink" title="ndarrayオブジェクト"></a>ndarrayオブジェクト</h2><p>NumPyで配列を扱う際に<code>array()</code>を使うと書きましたが、これはndarrayというオブジェクトで実は中身はC言語の配列です。<br>Pythonのリスト型と比較して大規模な配列を扱う際の処理効率が非常に良くなっています。</p>
<p>ndarrayはN-dimensional arrayのことでN次元配列を扱えるクラスってことです。まんまですねw</p>
<h2 id="NumPyはなぜ速いのか？"><a href="#NumPyはなぜ速いのか？" class="headerlink" title="NumPyはなぜ速いのか？"></a>NumPyはなぜ速いのか？</h2><p>Pythonはスクリプト言語なので静的言語よりは遅くなりますが、NumPyはndarrayのように主な実装をCやC++でか書いているので速いんです。</p>
<p>終わり。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gitエイリアス]]></title>
      <url>http://devlog.site/git/git-alias/</url>
      <content type="html"><![CDATA[<h2 id="gitエイリアス"><a href="#gitエイリアス" class="headerlink" title="gitエイリアス"></a>gitエイリアス</h2><p>gitはたくさんのコマンドがあってオプションも盛りだくさんなので毎度忘れてしまうし、いちいち打つのが大変なのでそんな時はgitエイリアスが便利です。<br><a id="more"></a></p>
<h2 id="gitconfigファイルで指定"><a href="#gitconfigファイルで指定" class="headerlink" title=".gitconfigファイルで指定"></a>.gitconfigファイルで指定</h2><p>.gitconfigファイルに以下のようにaliasセクションに<code>短縮形 = 展開形</code>というふうに書きます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[alias]</div><div class="line">    ai = add -i</div></pre></td></tr></table></figure>
<p>こんな感じで書きます。</p>
<h2 id="設定しているエイリアス"><a href="#設定しているエイリアス" class="headerlink" title="設定しているエイリアス"></a>設定しているエイリアス</h2><p>私が設定しているエイリアスですが、ちゃんと見返すと全然使ってないものも結構ありましたw</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">ai	 =&gt; add -i</div><div class="line">al	 =&gt; !git config --get-regexp &apos;^alias\.&apos; | sed &apos;s/alias\.\([^ ]*\) \(.*\)/\1\	 =&gt; \2/&apos; | sort</div><div class="line">br	 =&gt; branch</div><div class="line">ch	 =&gt; checkout</div><div class="line">cl	 =&gt; clean</div><div class="line">co	 =&gt; commit</div><div class="line">cp	 =&gt; cherry-pick</div><div class="line">d1	 =&gt; diff HEAD~</div><div class="line">d2	 =&gt; diff HEAD~2</div><div class="line">d3	 =&gt; diff HEAD~3</div><div class="line">dc	 =&gt; diff --cached</div><div class="line">dn	 =&gt; diff --name-only</div><div class="line">fi	 =&gt; !git ls-files | grep -i</div><div class="line">fa	 =&gt; fetch --all --prune</div><div class="line">fe	 =&gt; fetch</div><div class="line">gr	 =&gt; log --graph --all --date=short --pretty=format:&apos;%Cgreen%h %cd %Cblue%cn %Creset%s %Cred%d%Creset&apos;</div><div class="line">ll	 =&gt; log --name-status --pretty=oneline</div><div class="line">rs	 =&gt; reset</div><div class="line">re   =&gt; rebase</div><div class="line">sh	 =&gt; show</div><div class="line">sl	 =&gt; stash list</div><div class="line">sp	 =&gt; stash pop</div><div class="line">ss	 =&gt; stash save</div><div class="line">st	 =&gt; status</div><div class="line">sts	 =&gt; status -s</div></pre></td></tr></table></figure>
<p>この機会に少し見直してみようと思います。</p>
<h2 id="どんなエイリアス設定したか忘れてしまったとき"><a href="#どんなエイリアス設定したか忘れてしまったとき" class="headerlink" title="どんなエイリアス設定したか忘れてしまったとき"></a>どんなエイリアス設定したか忘れてしまったとき</h2><p>色々なエイリアスを設定しているとたまにしか使わないのは忘れがちになってしまうのでそんなときに役に立つのがこれ</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">al  =&gt; !git config --get-regexp &apos;^alias\.&apos; | sed &apos;s/alias\.\([^ ]*\) \(.*\)/\1\ =&gt; \2/&apos; | sort</div></pre></td></tr></table></figure>
<p>エイリアスの一覧を表示してくれるエイリアス。.gitconfigをいちいち確認しなくていいので便利です。</p>
<p>その他にもたくさん便利な使い方があるのでエイリアスはどんどん設定して効率化していきたいですね。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker基本コマンド]]></title>
      <url>http://devlog.site/docker/docker1/</url>
      <content type="html"><![CDATA[<h2 id="Dockerを使うときのメモ"><a href="#Dockerを使うときのメモ" class="headerlink" title="Dockerを使うときのメモ"></a>Dockerを使うときのメモ</h2><p>先人からDockerの環境を引き継ぐこととなりDockerほぼ使ったことなかったので<br>色々調べたことをメモしておきます。<br><a id="more"></a></p>
<h2 id="Dockerイメージの検索"><a href="#Dockerイメージの検索" class="headerlink" title="Dockerイメージの検索"></a>Dockerイメージの検索</h2><p>DockerイメージをDocker Hub上から検索できます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker search [イメージ名]</div></pre></td></tr></table></figure>
<h2 id="Dcokerイメージをダウンロード"><a href="#Dcokerイメージをダウンロード" class="headerlink" title="Dcokerイメージをダウンロード"></a>Dcokerイメージをダウンロード</h2><p>Docker Hub上からイメージをダウンロードします</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull [イメージ名]</div></pre></td></tr></table></figure>
<h2 id="取得したDockerイメージの確認"><a href="#取得したDockerイメージの確認" class="headerlink" title="取得したDockerイメージの確認"></a>取得したDockerイメージの確認</h2><p>pullしてきたイメージの一覧を確認できる</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure>
<h2 id="起動中のコンテナの一覧を確認"><a href="#起動中のコンテナの一覧を確認" class="headerlink" title="起動中のコンテナの一覧を確認"></a>起動中のコンテナの一覧を確認</h2><p><code>-a</code>を付けると停止中のコンテナも取得できる</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div></pre></td></tr></table></figure>
<h2 id="DockerfileからDockerイメージを構築"><a href="#DockerfileからDockerイメージを構築" class="headerlink" title="DockerfileからDockerイメージを構築"></a>DockerfileからDockerイメージを構築</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build</div></pre></td></tr></table></figure>
<h2 id="Dockerイメージからコンテナを作成"><a href="#Dockerイメージからコンテナを作成" class="headerlink" title="Dockerイメージからコンテナを作成"></a>Dockerイメージからコンテナを作成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker create [イメージ名]</div></pre></td></tr></table></figure>
<h2 id="Dockerコンテナをスタート"><a href="#Dockerコンテナをスタート" class="headerlink" title="Dockerコンテナをスタート"></a>Dockerコンテナをスタート</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start [コンテナ名]</div></pre></td></tr></table></figure>
<h2 id="Dockerコンテナのストップ"><a href="#Dockerコンテナのストップ" class="headerlink" title="Dockerコンテナのストップ"></a>Dockerコンテナのストップ</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker stop [コンテナ名]</div></pre></td></tr></table></figure>
<h2 id="Dcokerコンテナの削除"><a href="#Dcokerコンテナの削除" class="headerlink" title="Dcokerコンテナの削除"></a>Dcokerコンテナの削除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm [コンテナ名]</div></pre></td></tr></table></figure>
<h2 id="Dockerビルド時の履歴を確認"><a href="#Dockerビルド時の履歴を確認" class="headerlink" title="Dockerビルド時の履歴を確認"></a>Dockerビルド時の履歴を確認</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker history [IMAGE]</div></pre></td></tr></table></figure>
<h2 id="Dockerのコンテナで動作中のシェルへの接続方法"><a href="#Dockerのコンテナで動作中のシェルへの接続方法" class="headerlink" title="Dockerのコンテナで動作中のシェルへの接続方法"></a>Dockerのコンテナで動作中のシェルへの接続方法</h2><p>動作中のDockerにシェルでつないで色々いじりたいとき</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -it [コンテナ名] /bin/bash</div></pre></td></tr></table></figure>
<h2 id="Dockerコンテナのログを確認"><a href="#Dockerコンテナのログを確認" class="headerlink" title="Dockerコンテナのログを確認"></a>Dockerコンテナのログを確認</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker logs [コンテナ名]</div></pre></td></tr></table></figure>
<h2 id="Dockerイメージの削除"><a href="#Dockerイメージの削除" class="headerlink" title="Dockerイメージの削除"></a>Dockerイメージの削除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi [IMAGE]</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlowの基本的なAPI1]]></title>
      <url>http://devlog.site/tensorflow/tensorflow5/</url>
      <content type="html"><![CDATA[<h2 id="TensorFlowのリファレンスを確認してみた"><a href="#TensorFlowのリファレンスを確認してみた" class="headerlink" title="TensorFlowのリファレンスを確認してみた"></a>TensorFlowのリファレンスを確認してみた</h2><p>ネットにはTensorFlowのサンプルコードが山ほどあるので読んで勉強したい！と思ったのですが、APIをまだ全然理解していないので今回は基礎的なAPIのリファレンスを確認してみました。<br>公式のリファレンスは<a href="https://www.tensorflow.org/api_docs/python/index.html" target="_blank" rel="external">こちら</a></p>
<p>Pythonの対話モードでAPIを実行してみました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python</div><div class="line">&gt;&gt;&gt; import tensorflow as tf</div><div class="line">&gt;&gt;&gt; sess = tf.Session()</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="zeros"><a href="#zeros" class="headerlink" title="zeros"></a>zeros</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; sess.run(tf.zeros(3))</div><div class="line">array([ 0.,  0.,  0.], dtype=float32)</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.zeros([3,3]))</div><div class="line">array([[ 0.,  0.,  0.],</div><div class="line">       [ 0.,  0.,  0.],</div><div class="line">       [ 0.,  0.,  0.]], dtype=float32)</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.zeros([3,3,3]))</div><div class="line">array([[[ 0.,  0.,  0.],</div><div class="line">        [ 0.,  0.,  0.],</div><div class="line">        [ 0.,  0.,  0.]],</div><div class="line"></div><div class="line">       [[ 0.,  0.,  0.],</div><div class="line">        [ 0.,  0.,  0.],</div><div class="line">        [ 0.,  0.,  0.]],</div><div class="line"></div><div class="line">       [[ 0.,  0.,  0.],</div><div class="line">        [ 0.,  0.,  0.],</div><div class="line">        [ 0.,  0.,  0.]]], dtype=float32)</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.zeros([3,3], dtype=tf.int32))</div><div class="line">array([[0, 0, 0],</div><div class="line">       [0, 0, 0],</div><div class="line">       [0, 0, 0]], dtype=int32)</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.zeros([3,3], &quot;int32&quot;))</div><div class="line">array([[0, 0, 0],</div><div class="line">       [0, 0, 0],</div><div class="line">       [0, 0, 0]], dtype=int32)</div></pre></td></tr></table></figure>
<p>0埋めされたTensorを作成してくれるAPIですね。<br>第二引数でdtype=の後にデータタイプを指定できるようです。<br>dtype=ではなく文字列として”int32”としてもいいみたいです。<br>指定しないとデフォルトでtf.float32データタイプになるようです。</p>
<h2 id="zeros-like"><a href="#zeros-like" class="headerlink" title="zeros_like"></a>zeros_like</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; sess.run(tf.zeros_like(0))</div><div class="line">0</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.zeros_like([1]))</div><div class="line">array([0], dtype=int32)</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.zeros_like([1,2]))</div><div class="line">array([0, 0], dtype=int32)</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.zeros_like([[1,2],[3,4]]))</div><div class="line">array([[0, 0],</div><div class="line">       [0, 0]], dtype=int32)</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.zeros_like([[1,2],[3,4],[5,6]]))</div><div class="line">array([[0, 0],</div><div class="line">       [0, 0],</div><div class="line">       [0, 0]], dtype=int32)</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.zeros_like([[1,2],[3,4]], &quot;float32&quot;))</div><div class="line">array([[ 0.,  0.],</div><div class="line">       [ 0.,  0.]], dtype=float32)</div></pre></td></tr></table></figure>
<p>zeros_likeは第一引数と同じ要素数のTensorを0埋めして作成してくるようです。<br>zerosと同様にデータタイプの指定もできますね。ただzerosの場合はデフォルトでtf.float32だったのが、<br>zeros_likeはデフォルトはtf.int32になっていますね。なんでだろう？？</p>
<h2 id="ones"><a href="#ones" class="headerlink" title="ones"></a>ones</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; sess.run(tf.ones([3]))</div><div class="line">array([ 1.,  1.,  1.], dtype=float32)</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.ones([3,3]))</div><div class="line">array([[ 1.,  1.,  1.],</div><div class="line">       [ 1.,  1.,  1.],</div><div class="line">       [ 1.,  1.,  1.]], dtype=float32)</div></pre></td></tr></table></figure>
<p>基本的にzerosと同様ですね。<br>zerosが0に対してonesは1埋めされたTensorを作成してくるAPIですね。<br>データタイプの指定も前述のAPIと同様のようですね。</p>
<h2 id="ones-like"><a href="#ones-like" class="headerlink" title="ones_like"></a>ones_like</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; sess.run(tf.ones_like(0))</div><div class="line">1</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.ones_like([1]))</div><div class="line">array([1], dtype=int32)</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.ones_like([1,2], &quot;float32&quot;))</div><div class="line">array([ 1.,  1.], dtype=float32)</div></pre></td></tr></table></figure>
<p>こちらもzeros_likeと同様で要素が0でなく1で埋められているだけの違いですね。</p>
<h2 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; sess.run(tf.fill([],3))</div><div class="line">3</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.fill([3],3))</div><div class="line">array([3, 3, 3], dtype=int32)</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.fill([3,3],3))</div><div class="line">array([[3, 3, 3],</div><div class="line">       [3, 3, 3],</div><div class="line">       [3, 3, 3]], dtype=int32)</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.fill([3], 3.5))</div><div class="line">array([ 3.5,  3.5,  3.5], dtype=float32)</div></pre></td></tr></table></figure>
<p>fillは第一引数で指定した要素数のTensorを第二引数で指定した値で埋めて返してくれるAPIのようです。</p>
<h2 id="constant"><a href="#constant" class="headerlink" title="constant"></a>constant</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; sess.run(tf.constant(1.5))</div><div class="line">1.5</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.constant([1]))</div><div class="line">array([1], dtype=int32)</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.constant([1.5, 2]))</div><div class="line">array([ 1.5,  2. ], dtype=float32)</div><div class="line"></div><div class="line">&gt;&gt;&gt; sess.run(tf.constant([[1.5, 2],[3, 4]], &quot;float32&quot;))</div><div class="line">array([[ 1.5,  2. ],</div><div class="line">       [ 3. ,  4. ]], dtype=float32)</div><div class="line">       </div><div class="line">&gt;&gt;&gt; sess.run(tf.constant(1.5, &quot;float32&quot;,[2,2]))</div><div class="line">array([[ 1.5,  1.5],</div><div class="line">       [ 1.5,  1.5]], dtype=float32)</div></pre></td></tr></table></figure>
<p>定数のTensorを生成するAPIのようですね。<br>第三引数にSharpを指定することも出来ます。</p>
<p>極々基礎的なAPIを確認してみました。今後も使っていてわからないものや気になったAPIをチェックしていきたいと思います。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tensorとは何か？]]></title>
      <url>http://devlog.site/tensorflow/tensorflow4/</url>
      <content type="html"><![CDATA[<h2 id="TensorFlowのTensorって何？"><a href="#TensorFlowのTensorって何？" class="headerlink" title="TensorFlowのTensorって何？"></a>TensorFlowのTensorって何？</h2><p><a href="http://devlog.site/tensorflow/tensorflow3">こちらの記事</a>でオペレーションが扱うデータのことをTensorと書きましたが、このTensorって一体何なんでしょう？<br>今回はこのTensorについてもっと詳しく調べてみたいと思います。</p>
<p>公式サイトの説明は<a href="https://www.tensorflow.org/versions/r0.11/resources/dims_types.html" target="_blank" rel="external">こちら</a>になります。</p>
<a id="more"></a>
<h2 id="TensorFlowのTensorはデータ構造"><a href="#TensorFlowのTensorはデータ構造" class="headerlink" title="TensorFlowのTensorはデータ構造"></a>TensorFlowのTensorはデータ構造</h2><p>TensorFlowで言うところのTensorというのは扱うデータ構造のことで、これを使ってを色々なデータを表現しています。<br>このTensorはRankとShape、Data Typesを持っています。</p>
<h2 id="RankとShape"><a href="#RankとShape" class="headerlink" title="RankとShape"></a>RankとShape</h2><p>Rankは「テンソルの階数」、Shapeは「テンソルの形」のことを言います。</p>
<table>
<thead>
<tr>
<th style="text-align:left">Rank</th>
<th style="text-align:left">Shape</th>
<th style="text-align:left">Dimension</th>
<th style="text-align:left">例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">[]</td>
<td style="text-align:left">0次元</td>
<td style="text-align:left">s = 713</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">[D0]</td>
<td style="text-align:left">1次元</td>
<td style="text-align:left">v = [1.1,2.2,3.3]</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">[D0, D1]</td>
<td style="text-align:left">2次元</td>
<td style="text-align:left">m = [[1,2,3],[4,5,6],[7,8,9]]</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">[D0, D1, D2]</td>
<td style="text-align:left">3次元</td>
<td style="text-align:left">t = [[[1,2,3]],[[4,5,6]],[[7,8,9]]]</td>
</tr>
<tr>
<td style="text-align:left">N</td>
<td style="text-align:left">[D0,D1, …Dn-1]</td>
<td style="text-align:left">n次元</td>
</tr>
</tbody>
</table>
<p>このようにRankが0ならShapeは[]となり0次元の値で、<br>Rankが3ならShapeは[D0, D1, D2]で3次元の配列になるってことですね。</p>
<h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><table>
<thead>
<tr>
<th style="text-align:left">データタイプ</th>
<th style="text-align:left">解説</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">tf.float16</td>
<td style="text-align:left">16ビット浮動小数点</td>
</tr>
<tr>
<td style="text-align:left">tf.float32</td>
<td style="text-align:left">32ビット浮動小数点</td>
</tr>
<tr>
<td style="text-align:left">tf.float64</td>
<td style="text-align:left">64ビット浮動小数点</td>
</tr>
<tr>
<td style="text-align:left">tf.int8</td>
<td style="text-align:left">8ビット整数</td>
</tr>
<tr>
<td style="text-align:left">tf.int16</td>
<td style="text-align:left">16ビット整数</td>
</tr>
<tr>
<td style="text-align:left">tf.int32</td>
<td style="text-align:left">32ビット整数</td>
</tr>
<tr>
<td style="text-align:left">tf.int64</td>
<td style="text-align:left">64ビット整数</td>
</tr>
<tr>
<td style="text-align:left">tf.uint8</td>
<td style="text-align:left">符号無し8ビット整数</td>
</tr>
<tr>
<td style="text-align:left">tf.string</td>
<td style="text-align:left">可変長文字列</td>
</tr>
<tr>
<td style="text-align:left">tf.bool</td>
<td style="text-align:left">真偽値</td>
</tr>
</tbody>
</table>
<p>データタイプは格納するデータの型のことですね。</p>
<h2 id="テンソルについて"><a href="#テンソルについて" class="headerlink" title="テンソルについて"></a>テンソルについて</h2><p>TensorFlowのTensorと一般的にテンソルというと少し違いがあるようです。<br>一般的にテンソルというと数学的なテンソルのことです。<br>wikiから引用すると</p>
<blockquote>
<p>テンソル（英: tensor, 独: Tensor）とは、線形的な量または線形的な幾何概念を一般化したもので、基底を選べば、多次元の配列として表現できるようなものである。</p>
</blockquote>
<p>とあります。ちょっと難しいですが、テンソルは、数学の線形の量を表す概念でのことです。<br>スカラーやベクトルもテンソルの一種になります。</p>
<p>例えば、大きさのみを持つスカラーは階数0のテンソルと表し、同様に力の大きさとその向きを持つベクトルは階数1のテンソルとなります。<br>また加速度ベクトル間の関係などをあらわす線型変換は階数2のテンソルと言います。<br>ん〜難しいですが、こういう概念もきちんと理解していきたいですね。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pythonのwith構文について調べてみた]]></title>
      <url>http://devlog.site/python/python-with/</url>
      <content type="html"><![CDATA[<h2 id="with構文について"><a href="#with構文について" class="headerlink" title="with構文について"></a>with構文について</h2><p>TensorFlowでpython書いてるとよく見かけるwith構文ですが、きちんと理解していなかったのでこの機会に調べてみました。<br>簡単なメモです。<br><a id="more"></a></p>
<h2 id="with構文とは？"><a href="#with構文とは？" class="headerlink" title="with構文とは？"></a>with構文とは？</h2><p>with構文はファイルの読み書きなど後処理が必要なものに対して安全にその処理を行える機能です。<br>簡単なファイルを開くコードを見てみましょう。</p>
<p>まずはwith構文を使っていないコード</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">text = <span class="keyword">None</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">  text = open(<span class="string">"text.txt"</span>, <span class="string">'w'</span>)</div><div class="line">  <span class="keyword">try</span>:</div><div class="line">    text.write(<span class="string">"Hello, world!"</span>)</div><div class="line">  <span class="keyword">except</span>:</div><div class="line">    <span class="keyword">raise</span></div><div class="line"><span class="keyword">finally</span>:</div><div class="line">  <span class="keyword">if</span> text:</div><div class="line">    text.close()</div></pre></td></tr></table></figure>
<p>厳密に書こうとすると結構大変ですよね。<br>次にwithを使った書き方についてですが、</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> ファイル読み込み <span class="keyword">as</span> 変数:</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>こんな感じの構文になります。<br>先ほどのファイルを開くコードを書き換えると</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"text.txt"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> text:</div><div class="line">    text.write(<span class="string">"Hello, world!"</span>)</div></pre></td></tr></table></figure>
<p>すっきりしましたね。これだけでwithを抜けた際にファイルを自動的に閉じてくれます。</p>
<h2 id="withが使えるオブジェクト"><a href="#withが使えるオブジェクト" class="headerlink" title="withが使えるオブジェクト"></a>withが使えるオブジェクト</h2><p>with構文はコードをスッキリ簡潔にしてくれるのでいろんなところで使いたいですが、<br>使える場合とそうでない場合があります。</p>
<p>withが使えるのは<strong>enter</strong>メソッドと<strong>exit</strong>メソッドの両方が定義されているオブジェクトの場合です。<br>例えばこんなコードを実行してみます。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__init__'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__enter__'</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__exit__'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__del__'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'hello'</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> Test() <span class="keyword">as</span> obj:</div><div class="line">    obj.say()</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'end'</span></div></pre></td></tr></table></figure>
<p>結果は次のようになります。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">__init__</div><div class="line">__enter__</div><div class="line">hello</div><div class="line">__exit__</div><div class="line">end</div><div class="line">__del__</div></pre></td></tr></table></figure>
<p>withを使うと<strong>enter</strong>メソッドと<strong>exit</strong>メソッドが呼び出されているのがわかると思います。<br>withを使いたい時は<strong>enter</strong>メソッドと<strong>exit</strong>メソッドをきちんと定義してあげましょう。</p>
<h2 id="TensorFlowでよく使うwith"><a href="#TensorFlowでよく使うwith" class="headerlink" title="TensorFlowでよく使うwith"></a>TensorFlowでよく使うwith</h2><p>ファイルを開く際に安全にcloseしてくれるwith構文ですが、TensorFlowではよくセッションを使用する際に使われていますね。<br>ということはSessionを安全に閉じてくれてるってことです。</p>
<p>なんでwith構文が使われているんだろうなぁと思っていましたが、そういった理由があったんですね。<br>TensorFlowのリファレンスを見てみるとSessionクラスには確かに<strong>enter</strong>メソッドと<strong>exit</strong>メソッドが定義されています。</p>
<blockquote>
<p>tf.Session.__enter__()<br>tf.Session.__exit__(exec_type, exec_value, exec_tb)</p>
</blockquote>
<h2 id="withのネスト"><a href="#withのネスト" class="headerlink" title="withのネスト"></a>withのネスト</h2><p>withはネストも出来るみたいです。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> A() <span class="keyword">as</span> a:</div><div class="line">    <span class="keyword">with</span> B() <span class="keyword">as</span> b:</div></pre></td></tr></table></figure>
<p>このようにネストして書くこともでき、またカンマで繋げても同じ意味になるようです。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> A() <span class="keyword">as</span> a, B() <span class="keyword">as</span> b:</div></pre></td></tr></table></figure>
<p>終わり</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IPython使ってみた]]></title>
      <url>http://devlog.site/python/ipython1/</url>
      <content type="html"><![CDATA[<h2 id="IPython使ってみた"><a href="#IPython使ってみた" class="headerlink" title="IPython使ってみた"></a>IPython使ってみた</h2><p>TensorFlowを勉強してて出てきたIPythonという言葉…なんかだよく分からなかったので調べてみました。<br><a id="more"></a></p>
<h2 id="IPythonとは？"><a href="#IPythonとは？" class="headerlink" title="IPythonとは？"></a>IPythonとは？</h2><p>「あいぱいそん」って読むらしいです。<br>Wikiを見てみると</p>
<blockquote>
<p>IPython (あいぱいそん) はPythonを対話的に実行するためのシェルである。オリジナルのPythonに比較して、型推定を強化し、対話的実行のための文法を追加してあり、コード・ハイライティングおよびタブによる補完が行える。</p>
</blockquote>
<p>とあります。要するに、IPythonは対話的に実行できてタブ補完とかしてくれて色とかついて見やすい便利なやつってことっぽいです。<br>まぁ使ってみた方が早そうですねw</p>
<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>私の環境はmacでOS X El Capitanです。<br>pythonのバージョンは2.7.11です。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python -V</div><div class="line">Python 2.7.11</div></pre></td></tr></table></figure>
<p>インストールにはpipコマンドを使用します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install ipython</div></pre></td></tr></table></figure>
<h2 id="起動してみる"><a href="#起動してみる" class="headerlink" title="起動してみる"></a>起動してみる</h2><p>インストールが終わったら早速起動してみましょう。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ipython</div></pre></td></tr></table></figure>
<p>起動したら<code>import t</code>と入力してTABキーを押してみましょう。<br>すると</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [1]: import t</div><div class="line">   tabnanny        terminalcommand this            tkColorChooser  tkSimpleDialog  traceback        </div><div class="line">   tarfile         termios         thread          tkCommonDialog  toaiff          traitlets        </div><div class="line">   telnetlib       test            threading       tkFileDialog    token           ttk             &gt;</div><div class="line">   tempfile        tests           time            tkFont          tokenize        tty              </div><div class="line">   tensorflow      textwrap        timeit          tkMessageBox    trace           turtle</div></pre></td></tr></table></figure>
<p>こんな感じで候補の一覧が出てきます！これは便利！<br>ちゃんとインポートしたモジュールの中も補完してくれます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">In [2]: tf.ze</div><div class="line">              tf.zeros             tf.zeros_like                                           </div><div class="line">              tf.zeros_initializer tf.zeta</div></pre></td></tr></table></figure>
<p>今まではpythonコマンドで対話的に実行してたんですが、これは便利ですね。</p>
<h2 id="便利な機能"><a href="#便利な機能" class="headerlink" title="便利な機能"></a>便利な機能</h2><h3 id="イントロスペクション"><a href="#イントロスペクション" class="headerlink" title="イントロスペクション"></a>イントロスペクション</h3><p>オブジェクトに?をつけてやると対象の情報が表示されます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">In [1]: ipython = &quot;Great!&quot;</div><div class="line">In [2]: ipython?</div><div class="line">Type:        str</div><div class="line">String form: Great!</div><div class="line">Length:      6</div><div class="line">Docstring:  </div><div class="line">str(object=&apos;&apos;) -&gt; string</div><div class="line"></div><div class="line">Return a nice string representation of the object.</div><div class="line">If the argument is a string, the return value is the same object.</div></pre></td></tr></table></figure>
<p>また関数に??をつけるとソースコードも表示されるようです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">In [1]: get_ipython??</div><div class="line">Signature: get_ipython()</div><div class="line">Source:   </div><div class="line">    def get_ipython(self):</div><div class="line">        &quot;&quot;&quot;Return the currently running IPython instance.&quot;&quot;&quot;</div><div class="line">        return self</div><div class="line">File:      ~/.pyenv/versions/2.7.11/envs/tensorflow0.10/lib/python2.7/site-packages/IPython/core/interactiveshell.py</div><div class="line">Type:      instancemethod</div></pre></td></tr></table></figure>
<h3 id="マジックコマンド"><a href="#マジックコマンド" class="headerlink" title="マジックコマンド"></a>マジックコマンド</h3><p>マジックコマンドはIPythonの用の便利コマンドで頭に%がつくものです。<br>公式のドキュメントは<a href="http://ipython.readthedocs.io/en/stable/interactive/magics.html" target="_blank" rel="external">こちら</a></p>
<p>便利そうなコマンドがたくさんありますね。</p>
<table>
<thead>
<tr>
<th style="text-align:left">コマンド</th>
<th style="text-align:left">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">%lsmagic</td>
<td style="text-align:left">利用できるマジックコマンドを表示する</td>
</tr>
<tr>
<td style="text-align:left">%hist</td>
<td style="text-align:left">または %history    コマンドの履歴を表示する</td>
</tr>
<tr>
<td style="text-align:left">%paste</td>
<td style="text-align:left">クリップボードのコードをペーストして実行する</td>
</tr>
<tr>
<td style="text-align:left">%run</td>
<td style="text-align:left">ファイルに保存されているスクリプトを実行する</td>
</tr>
<tr>
<td style="text-align:left">%time</td>
<td style="text-align:left">単一ステートメントの実行時間を測定し表示する</td>
</tr>
<tr>
<td style="text-align:left">%timeit</td>
<td style="text-align:left">ステートメントを複数回実行して平均実行時間を表示する</td>
</tr>
<tr>
<td style="text-align:left">%save</td>
<td style="text-align:left">コマンドの実行履歴をファイルに保存する</td>
</tr>
<tr>
<td style="text-align:left">%reset</td>
<td style="text-align:left">変数や名前空間などをクリアする</td>
</tr>
</tbody>
</table>
<p>特に%saveは良さそうですね。IPythonでああでもない、こうでもないって適当に試した履歴をファイルに保存しておきたいってことは多そうです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">In [21]: %save save.py 1-20</div></pre></td></tr></table></figure>
<p>こんな感じでファイルに保存できるようです。</p>
<h2 id="終了"><a href="#終了" class="headerlink" title="終了"></a>終了</h2><p>終了するときはexitで抜けられます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">In [1]: exit</div></pre></td></tr></table></figure>
<h2 id="TensorFlowのInteractiveSession"><a href="#TensorFlowのInteractiveSession" class="headerlink" title="TensorFlowのInteractiveSession"></a>TensorFlowのInteractiveSession</h2><p>今後IPythonをTensorFlowの勉強に使いたいと思いますが、そんな時に便利なのが、InteractiveSessionです。<br>TensorFlowはまずグラフを作り、Sessionを実行するという流れですが、対話的に作業する際にはグラフを作り終えない状態で、Sessionで実行してみたい場合があります。<br>そこでInteractiveSessionを使うと途中で色々と確認しながら作業を進められるということですね。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[機械学習について調べてみた]]></title>
      <url>http://devlog.site/machine-learning/machine-learning1/</url>
      <content type="html"><![CDATA[<h1 id="機械学習とは何か？"><a href="#機械学習とは何か？" class="headerlink" title="機械学習とは何か？"></a>機械学習とは何か？</h1><p>今回はそもそも機械学習とは何か？ということを学んでいきたいと思います。<br><a id="more"></a></p>
<h2 id="機械学習とは一言で"><a href="#機械学習とは一言で" class="headerlink" title="機械学習とは一言で"></a>機械学習とは一言で</h2><p>機械学習についてネットで調べると色々な記事があり、たくさんの専門用語が出てきて調べれば調べるほどよくわかりません。<br>そんな中<a href="http://www.sas.com/ja_jp/insights/analytics/machine-learning.html" target="_blank" rel="external">こちら</a>のサイトが分かりやすかったので、少し引用させていただくと</p>
<blockquote>
<p>機械学習とは、データから反復的に学習し、そこに潜むパターンを見つけ出すことです。<br>そして学習した結果を新たなデータにあてはめることで、パターンにしたがって将来を予測することができます。</p>
</blockquote>
<p>とのことです。<br>簡潔に言うと機械学習とは「パターン認識」ってことですね。<br>そのパターンを見つけ出す過程のことを学習と呼んでいるようです。</p>
<p>そしてパターンがわかってしまえば、新たなデータがそのパターンに当てはまるかを調べればいいだけなので、<br>予測することができるってわけですね。</p>
<h2 id="機械学習は何の役に立つのか？"><a href="#機械学習は何の役に立つのか？" class="headerlink" title="機械学習は何の役に立つのか？"></a>機械学習は何の役に立つのか？</h2><p>機械学習はパターンを認識するものということですが、一体どんなことに役立つのでしょうか？<br>いくつか事例を考えてみましょう。</p>
<ol>
<li>画像認識<ul>
<li>ex)写真の特徴のパターンを摘出することで、他の写真と一致するかどうかは判定する</li>
</ul>
</li>
<li>声紋認証<ul>
<li>ex)音声の特徴パターンを摘出することで、他人の声と本人の声かどうか判定する</li>
</ul>
</li>
<li>おすすめの商品<ul>
<li>ex)自分と似た行動パターンを持つ人を摘出することで、購入履歴などからおすすめの商品を判定する</li>
</ul>
</li>
</ol>
<p>便利な機能にたくさん使われているみたいですね。<br>と、やはりどの事例もパターンを見つけ出して、それを新しいデータに適応して予測するということをやっているようですね。<br>機械学習を学ぶということは、このパターンを見つけ出す様々な方法やその精度を上げるにはどうしたらいいのかということを学ぶってことのようです。</p>
<h2 id="なぜ機械学習が流行っているのか？"><a href="#なぜ機械学習が流行っているのか？" class="headerlink" title="なぜ機械学習が流行っているのか？"></a>なぜ機械学習が流行っているのか？</h2><p>最近、AlphaGoというプログラムが囲碁で世界トップクラスの棋士に勝ったり、機械学習でGoogle翻訳が良くなったとか、はたまた宇宙人の探索に機械学習を使うとか、そんな機械学習についてのニュースを良く目にしますよね。なぜいま機械学習はこんなに流行っているんでしょう？</p>
<p>結論から言うとストレージの低価格化とコンピューティング・パワーが上昇した為です。</p>
<p>機械学習のブームは今回が初めてではなく、過去にも何回かありました。<br>流行っては廃れ、また流行っては廃れを繰り返して、またここ最近流行りがきています。</p>
<p>では今こんなにも流行っている機械学習がなぜ過去には廃れてしまったかというと、<br>機械学習は先にも述べたように膨大なサンプルデータとそこからパターンを見つけ出す計算処理を行う必要があったからです。</p>
<p>膨大なサンプルデータを保持しておく為には大容量のストレージが必要ですし、その膨大なサンプルデータからパターンを見つけだす為にはさらに膨大な量の計算処理を行う必要があり、それにはかなりのコンピューティング・パワーを必要とします。<br>昔は今よりストレージの確保も容易ではなくマシーンのパワーもなかった為、ブームは去ってしまったようです。</p>
<p>逆を言うと今はストレージは安く手に入りCPUやGPUの性能も向上しているので個人でも簡単に機械学習を試すことできる為、<br>こんなにも流行っているんですね。</p>
<h2 id="機械学習の進め方"><a href="#機械学習の進め方" class="headerlink" title="機械学習の進め方"></a>機械学習の進め方</h2><p>流行っているとなればやはりやるしかない、ということで機械学習に取り組んでいきたいのですが、どうゆう風に進めるべきなんでしょうか。<br>機械学習の進め方としてはまず、どんなデータからどんなパターンを摘出したいかを考えるところからはじめるのが良さそうです。<br>それによって機械学習で使用するアルゴリズムや処理が変わると思いますので、まずは機械学習を利用して何がしたいかを考えてみましょう。</p>
<p>そして、何がしたいかが決まればサンプルデータの収集を行い、ストレージに保存、機械学習を行い、学習結果を分析、結果からフィードバックを得て、より精度の高いパターンを摘出するといった流れになると思います。</p>
<p>まとめると</p>
<ol>
<li>機械学習でどんなことがしたいかを考える</li>
<li>サンプルデータの収集を行う</li>
<li>収集したデータを保存する</li>
<li>機械学習でパターンを摘出する</li>
<li>結果を分析する</li>
<li>フィードバックからより良く改善していく</li>
</ol>
<p>こんな感じでしょうか。<br>専門的なアルゴリズムや技法は進める中で順々に学んでいこうと思います。いきなり難しい数式の勉強とかやっても挫折しそうなので…</p>
<h2 id="機械学習で大事なところ"><a href="#機械学習で大事なところ" class="headerlink" title="機械学習で大事なところ"></a>機械学習で大事なところ</h2><p>機械学習はパターン認識だと言いましたが、パターン認識とは具体的にどんなことでしょうか？</p>
<p>人間は文字を見たとき、例えば「おはよう」という文字を見たとき、これが文字で朝の挨拶だと認識できます。<br>また、犬の写真を見たときにそれが写真で犬が写っていると認識できます。<br>これと同じことを機械が出来るようにするにはどうしたらいいでしょう？</p>
<p>まず人間はどうやって文字や写真を認識しているのか考えてみましょう。<br>詳しくは脳科学の話になってしまうと思うのでわかりませんが、<br>人間は外部からの情報の<strong>特徴</strong>を摘出し、その意味を正しく認識することによってそれが何であるかを理解しています。</p>
<p>文字には文字の特徴、写真には写真の特徴、それぞれの特徴があります。その特徴を摘出することができれば、<br>機械にも同じことが出来るようになるはずなんです。</p>
<p>そう機械学習で大事なことはこの特徴を見つけ出すことです。</p>
<h2 id="特徴はどうやって決まるの？"><a href="#特徴はどうやって決まるの？" class="headerlink" title="特徴はどうやって決まるの？"></a>特徴はどうやって決まるの？</h2><p>外部の情報から特徴を見つけ出せれば機械にもそれがどんなものか認識できるということですが、その特徴はどうやって決まっているのでしょうか？<br>例えば「9」という数字の特徴は上に円があって円の右下から尻尾がはえ下がって少し丸まっているといった感じでしょうか。<br>このように数字や文字などは簡単に特徴が思いつくと思います。</p>
<p>では迷惑メールか、そうでない通常のメールかを判断しようとした場合、迷惑メールの特徴とはどういったものでしょうか？<br>“無料”とか”出会い”とか”今すぐ”などといった言葉が多く含まれればといった感じでしょうか？<br>これは少し難しいですよね。</p>
<p>ですが機械はどういった特徴があるものが迷惑メールなのかという、最初の基準となるデータがなければ学習をスタートすることはできません。つまり機械学習では対象のデータがどんな意味を持つかということは人間が決めなければならないのです。</p>
<h2 id="ディープラーニング"><a href="#ディープラーニング" class="headerlink" title="ディープラーニング"></a>ディープラーニング</h2><p>機械学習では人間が特徴を決める必要があると先ほど書きましたが、実はその特徴すら機械が見つけ出すことも可能なんです。<br>それが機械学習の一種であるディープラーニング(深層学習)です。</p>
<p>このディープラーニングは様々な分野で活用されており、車の自動運転や冒頭でも書いたAlphaGoにも利用されており今後より研究開発が進むと考えられています。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlowの基礎]]></title>
      <url>http://devlog.site/tensorflow/tensorflow3/</url>
      <content type="html"><![CDATA[<h1 id="TensorFlow基礎"><a href="#TensorFlow基礎" class="headerlink" title="TensorFlow基礎"></a>TensorFlow基礎</h1><p>今回はTensorFlowの計算処理の流れを見ていきたいと思います。</p>
<h2 id="TensorFlowの計算処理の流れ"><a href="#TensorFlowの計算処理の流れ" class="headerlink" title="TensorFlowの計算処理の流れ"></a>TensorFlowの計算処理の流れ</h2><p><a href="http://devlog.site/tensorflow/tensorflow2/">前回のTensorFlowで四則演算をやってみた</a>でも少しだけ書きましたが、<br>ざっくりオペレーションを先に定義し、セッションを使用してそれを実行するという流れになります。<br>このオペレーションやセッションとはどんなものなんでしょうか？<br><a id="more"></a></p>
<p>もう少し詳しく調べてみると、TensorFlowでは計算処理にグラフを用いるとのことです。<br>グラフというのはエクセルとかでよく見る折れ線グラフや円グラフのことではなく、<br><a href="https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A9%E3%83%95%E7%90%86%E8%AB%96" target="_blank" rel="external">こちらのwikiのグラフ理論</a>のことらしいです。</p>
<p>グラフはノードとエッジから構成されるデータ構造のことです。またTensorFlowにおいてのノードはop(オペレーション)と呼ばれ、どうやら一つの計算処理に対応しているとのこと。<br>オペレーションというのは簡単に言うと何かしらの計算処理を行う一つの処理ブロックということのようです。</p>
<p>このopはTensor(テンソル)と呼ばれる行列形式のデータを受け取り、何かしらの計算処理を行い、結果を次のopへ渡していきます。<br>次のopでも受け取った行列形式のデータを使用し、同じように計算処理を行いさらに次のopへ結果を渡します。<br>このように次々にopにデータを受け渡し計算処理を行うことで、最終的な結果を得ることができるという流れです。</p>
<p>次に先ほど出てきたエッジについてです。<br>エッジはノードとノードを繋ぐものでデータをどのノードからどのノードへ受け渡すかを決めるものです。<br>単純にノードで処理した結果を次にどのノードで処理されるかというだけのようですね。</p>
<p>最後にセッションについてです。<br>TensorFlowでは各opごとにCPUコアやGPUコアのリソースをどの程度割り当てるかを指定することができます。<br>パワーを必要とする計算処理には多くのリソースを割り当て、簡単な処理には少ないリソースで済ませるという割り振りができるようでうす。<br>この割り当てを担うのがセッションのようです。そしてセッションは各opの実行も行います。</p>
<p>簡単なコードを見てみましょう。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line"><span class="comment"># 定数の定義</span></div><div class="line">const  = tf.constant(<span class="number">2</span>)</div><div class="line">const1 = tf.constant(<span class="number">3</span>)</div><div class="line">const2 = tf.constant(<span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="comment"># add_opノード(op)を定義</span></div><div class="line">add_op  = tf.add(const, const1)</div><div class="line"><span class="comment"># add_op1ノード(op)を定義、同時にadd_opの結果をadd_op1へ受け渡すエッジ</span></div><div class="line">add_op1 = tf.add(add_op, const2)</div><div class="line"></div><div class="line"><span class="comment"># セッション</span></div><div class="line">sess = tf.Session()</div><div class="line"><span class="comment"># add_opの実行</span></div><div class="line">sess.run(add_op)</div><div class="line"><span class="comment"># add_op1の実行、結果をresultへ格納</span></div><div class="line">result = sess.run(add_op1)</div><div class="line"></div><div class="line">print(result)</div></pre></td></tr></table></figure>
<p>足し算を2回行うだけの処理です。実行すると9が出力されると思います。<br>コメントでコード中に注釈を入れているのでわかると思いますが、<br>それぞれがノード(op)、エッジ、セッションになります。</p>
<p>これをtensorboardでグラフ出力してみるとこんな感じになります。</p>
<p>オペレーションAddとAdd_1がエッジで繋がれ、AddにはConst、Const_1が、Add_1にはConst_2が入力として渡されているのがわかりますね。<br>なんとなくTensorFlowの計算処理の流れがわかった気がします！</p>
<h2 id="TensorBoardについて"><a href="#TensorBoardについて" class="headerlink" title="TensorBoardについて"></a>TensorBoardについて</h2><p>先ほど出てきたTensorBoardとは何かというと、TensorFlowに搭載されている可視化ツールのことです。<br>TensorBoardを使用することでグラフを可視化でき、ブラウザで確認することができます。</p>
<p>TensorBoardでグラフ出力するには以下のコードを追加します。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tf.train.SummaryWriter(<span class="string">'./'</span>, sess.graph)</div></pre></td></tr></table></figure>
<p>追記したファイルを実行するとTensorBoard用のファイルが生成されます。<br>TensorBoard用のファイルが生成されたら、次のコマンドを実行します。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tensorboard --logdir=[TensorBoard用のファイルがあるディレクトリ]</div></pre></td></tr></table></figure>
<p>ブラウザでlocalhost:6006にアクセスするとTensorBoardが立ち上がっていることが確認できると思います。<br>TensorBoardは便利な使い方が色々あるみたいなので今後もっと詳しく調べてみたいと思います。</p>
<p>今回はここまでです。<br>次回はTensorFlowを使う上でもっと基本的な機械学習とは何かについて学んでいこうと思います。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlowで四則演算をやってみた]]></title>
      <url>http://devlog.site/tensorflow/tensorflow2/</url>
      <content type="html"><![CDATA[<h1 id="TensorFlowで四則演算をやってみた"><a href="#TensorFlowで四則演算をやってみた" class="headerlink" title="TensorFlowで四則演算をやってみた"></a>TensorFlowで四則演算をやってみた</h1><p><a href="http://devlog.site/tensorflow/tensorflow1/">前回</a>環境を整えたので、今回はTensorFlowで四則演算を行ってみました。</p>
<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TensorFlow全くの初心者ですので、右も左もわかってません。間違ったこともたくさん書いてると思います。基本的に自分の為にメモしておく程度なのであしからずです。</p>
<h2 id="四則演算"><a href="#四則演算" class="headerlink" title="四則演算"></a>四則演算</h2><p>まずはTensorFlowで四則演算を行ってみたいと思います。<br>こんな感じのコードになります。<br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line"><span class="comment"># 定数宣言</span></div><div class="line">const1 = tf.constant(<span class="number">2</span>)</div><div class="line">const2 = tf.constant(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># 足し算オペレーション</span></div><div class="line">add_op = tf.add(const1, const2)</div><div class="line"></div><div class="line"><span class="comment"># セッションオブジェクト</span></div><div class="line">sess = tf.Session()</div><div class="line"></div><div class="line">result = sess.run(add_op)</div><div class="line">print(result)</div><div class="line"></div><div class="line"><span class="comment"># 引き算オペレーション</span></div><div class="line">sub_op = tf.sub(const1, const2)</div><div class="line">result = sess.run(sub_op)</div><div class="line">print(result)</div><div class="line"></div><div class="line"><span class="comment"># 掛け算オペレーション</span></div><div class="line">mul_op = tf.mul(const1, const2)</div><div class="line">result = sess.run(mul_op)</div><div class="line">print(result)</div><div class="line"></div><div class="line"><span class="comment"># 割り算オペレーション</span></div><div class="line">div_op = tf.div(const1, const2)</div><div class="line">result = sess.run(div_op)</div><div class="line">print(result)</div></pre></td></tr></table></figure>
<p>これを適当な名前(今回はmath.py)で保存して実行すると</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">python math.py</div><div class="line">5</div><div class="line">-1</div><div class="line">6</div><div class="line">0</div></pre></td></tr></table></figure>
<p>と出力されます。普通の四則演算のコードと全然違いますよね。<br>1つずつ解説していきましょう。</p>
<p>1行目</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div></pre></td></tr></table></figure>
<p>これはtensorflow moduleをインポートして、それをtfとして使用するということです。</p>
<p>4行目</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const1 = tf.constant(<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>const1という定数を宣言し、その定数に2を設定しています。</p>
<p>8行目</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add_op = tf.add(const1, const2)</div></pre></td></tr></table></figure>
<p>const1とconst2を足し算するオペーレションadd_opを設定</p>
<p>11行目</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sess = tf.Session()</div></pre></td></tr></table></figure>
<p>セッションの作成</p>
<p>13行目</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result = sess.run(add_op)</div></pre></td></tr></table></figure>
<p>定義したオペレーションの実行</p>
<p>足し算以降の引き算、掛け算、割り算はやってることは同じです。<br>とこのように、TensorFlowでは最初に演算するオペレーションを定義し、その後でセッションを使用してその演算を行うという流れになります。<br>基本的な概念は一旦置いておいて、ざっとこんな感じのようです。</p>
<p>ところで気になった方もいるかもしれませんが、割り算の結果が0になってしまっていますね。<br>2 / 3 なので0.666…になるはず？ですよね。いえ、これは間違いではなく、正しい結果です。<br>tf.divはリファレンスを見てみると</p>
<blockquote>
<p>テンソルの数値型がint等の浮動小数でない型である場合、小数点以下切り捨て</p>
</blockquote>
<p>となっているので小数点以下が切り捨てられてしまって0になっているんですね。</p>
<p>小数点以下を切り捨てたくない場合はtf.truedivを使用してます。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div_op = tf.truediv(const1, const2)</div><div class="line">result = sess.run(div_op)</div><div class="line">print(result)</div></pre></td></tr></table></figure>
<p>こうすることで正しく0.666…が出力されます。</p>
<p>次回は基礎的な概念を少し学んでみたいと思います。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlowの環境を作ってみた]]></title>
      <url>http://devlog.site/tensorflow/tensorflow1/</url>
      <content type="html"><![CDATA[<h1 id="TensorFlowの環境を作ってみた"><a href="#TensorFlowの環境を作ってみた" class="headerlink" title="TensorFlowの環境を作ってみた"></a>TensorFlowの環境を作ってみた</h1><p>機械学習の勉強を始めようと思い、今回はTensorFlowの環境を作成してみました。</p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>私の環境はmacでOS X El Capitanです。まだmacOS Sierraにはあげてません…<br>TensorFlowのバージョンは0.10を使用します。<br>HomeBrewを使用しますので予めインストールしておいて下さい。<br><a id="more"></a></p>
<h2 id="pythonのインストール"><a href="#pythonのインストール" class="headerlink" title="pythonのインストール"></a>pythonのインストール</h2><p>TensorFlowではpythonを使用するので事前にインストールしておきます。<br>macには一応デフォルトでpythonがインストールされえていますが、TensorFlow用に別バージョンのpythonを使用したいと思います。<br>インストールにはバージョン管理が便利なpyenvを使用しますので先にこちらをインストールしておきます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install pyenv</div></pre></td></tr></table></figure>
<p>~/.bash_profileに以下を追加します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PATH=&quot;$HOME/.pyenv/bin:$PATH&quot;</div><div class="line">eval &quot;$(pyenv init -)&quot;</div></pre></td></tr></table></figure>
<p>pyenvのインストールが終わったら現在使用されているpythonを確認してみましょう</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pyenv versions</div><div class="line">* system (set by /Users/hoge/.pyenv/version)</div></pre></td></tr></table></figure>
<p>macのデフォルトのpythonになっていますね。<br>それではpythonをインストールしてみましょう。今回は2.7.11と3.5.1をインストールしてみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pyenv install 2.7.11</div><div class="line">pyenv install 3.5.1</div></pre></td></tr></table></figure>
<p>インストールが終わったら、対象のバージョンが追加されているか確認してみましょう。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pyenv versions</div><div class="line">* system (set by /Users/hoge/.pyenv/version)</div><div class="line">  2.7.11</div><div class="line">  3.5.1</div></pre></td></tr></table></figure>
<p>2.7.11と3.5.1が追加されていることがわかりますね。<br>ただしこのままだとmacにデフォルトで入っているpythonを使用する設定になっていますのでバージョンの切り替えを行います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pyenv global 2.7.11</div><div class="line">pyenv versions</div><div class="line">  system</div><div class="line">* 2.7.11 (set by /Users/hoge/.pyenv/version)</div><div class="line">  3.5.1</div></pre></td></tr></table></figure>
<p>globalでバージョンの切り替えを行うことができます。systemに付いていた✳︎マークが2.7.11のところに付いているのがわかると思います。これで2.7.11へ切り替わりました。</p>
<h2 id="pyenv-virtualenvのインストール"><a href="#pyenv-virtualenvのインストール" class="headerlink" title="pyenv-virtualenvのインストール"></a>pyenv-virtualenvのインストール</h2><p>今回はTensorFlow用の仮想環境を作成してその上でTensorFlowを動かしてみたいと思います。<br>仮想環境作成に便利なpyenv-virtualenvを使用します。まずはインストールから。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install pyenv-virtualenv</div></pre></td></tr></table></figure>
<p>インストールはbrewコマンドで1発で済みます。楽チンですね。</p>
<h2 id="仮想環境の作成"><a href="#仮想環境の作成" class="headerlink" title="仮想環境の作成"></a>仮想環境の作成</h2><p>pyenv-virtualenvのインストールが終わったら早速、仮想環境を作成してみたいと思います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv virtualenv [pyenvのバージョン] [仮想環境名]</div></pre></td></tr></table></figure>
<p>このコマンドで仮想環境が作れます。<br>今回はTensorFlowのバージョン0.10を使用するので仮想環境名はtensorflow0.10として作成してみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv virtualenv 2.7.11 tensorflow0.10</div></pre></td></tr></table></figure>
<p>作成が終わったらpyenv versionsコマンドをた実行してみましょう</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pyenv versions</div><div class="line">  system</div><div class="line">* 2.7.11 (set by /Users/hoge/.pyenv/version)</div><div class="line">  2.7.11/envs/tensorflow0.10</div><div class="line">  3.5.1</div><div class="line">  tensorflow0.10</div></pre></td></tr></table></figure>
<p>2.7.11/envs/tensorflow0.10とtensorflow0.10が追加されていることがわかりますね。pyenv globalコマンドでバージョンを切り替えましょう</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv global tensorflow0.10</div></pre></td></tr></table></figure>
<p>ここまでで仮想環境の作成が終了です。<br>仮想環境へ入るにはアクティベートコマンドを実行します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv activate</div></pre></td></tr></table></figure>
<p>これで仮想環境へ入ることができます。仮想環境から出る場合は以下のコマンドを実行します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv deactivate</div></pre></td></tr></table></figure>
<h2 id="TensorFlowのインストール"><a href="#TensorFlowのインストール" class="headerlink" title="TensorFlowのインストール"></a>TensorFlowのインストール</h2><p>ここからは先ほど作成した仮装環境上で行って下さい。<br>TensorFlowのインストールにはPyPIを使用します。PyPIはPythonのパッケージ管理ツールで、今回使用するpython2.7.11にはデフォルトでインストールされています。<br>コマンドはpipになります。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip -V</div><div class="line">pip 9.0.1 from /Users/hoge/.pyenv/versions/2.7.11/envs/tensorflow0.10/lib/python2.7/site-packages (python 2.7)</div></pre></td></tr></table></figure>
<p>PyPIを使用してTensorFlowをインストールするのですが、TensorFlowはPyPIのパッケージには登録されていないのでURLを指定してインストールを行います。</p>
<p>またTensorFlowにはPC環境に応じたバージョンがいくつかあり、ご自身のPC環境に応じたバージョンを使用して下さい。<br><a href="https://www.tensorflow.org/versions/r0.10/get_started/os_setup.html#pip-installation" target="_blank" rel="external">TensorFlow Pip installation</a>こちらから確認できます。</p>
<p>PC環境の違いはGPUがあるかないか、OSはLinuxかMacか、pythonは2.7か3.4もしくは3.5<br>かといった違いです。<br>私の場合はGPUなし、Mac、python2.7になりますので以下のようにインストールを行いました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.10.0-py2-none-any.whl</div><div class="line">pip install --upgrade $TF_BINARY_URL</div></pre></td></tr></table></figure>
<p>これでTensorFlowのインストールは終了です。</p>
<h2 id="TensorFlowの動作確認"><a href="#TensorFlowの動作確認" class="headerlink" title="TensorFlowの動作確認"></a>TensorFlowの動作確認</h2><p>動作確認は<a href="https://www.tensorflow.org/versions/r0.10/get_started/os_setup.html#test-the-tensorflow-installation" target="_blank" rel="external">公式サイト</a>にもあるようにコマンドラインからpythonコマンドで行います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line">...</div><div class="line">&gt;&gt;&gt; import tensorflow as tf</div><div class="line">&gt;&gt;&gt; hello = tf.constant(&apos;Hello, TensorFlow!&apos;)</div><div class="line">&gt;&gt;&gt; sess = tf.Session()</div><div class="line">&gt;&gt;&gt; print(sess.run(hello))</div><div class="line">Hello, TensorFlow!</div><div class="line">&gt;&gt;&gt; a = tf.constant(10)</div><div class="line">&gt;&gt;&gt; b = tf.constant(32)</div><div class="line">&gt;&gt;&gt; print(sess.run(a + b))</div><div class="line">42</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>これで無事にTensorFlowが動作していることが確認できました。<br>今後はこのTensorFlowで遊んでみたいと思います。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexoでブログをはじめてみた後編]]></title>
      <url>http://devlog.site/hexo/Hexo-Blog-Start-3/</url>
      <content type="html"><![CDATA[<p><a href="http://devlog.site/2016/hexo/Hexo-Blog-Start-2/">Hexoでブログをはじめてみた-中編</a>の続きです。</p>
<p>Github Pagesにブログを公開できたら過ぎに記事をポストしてみます。<br><a id="more"></a></p>
<h3 id="記事の作成"><a href="#記事の作成" class="headerlink" title="記事の作成"></a>記事の作成</h3><p>記事の作成にはhexoコマンドを使用します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new post [記事のタイトル]</div></pre></td></tr></table></figure>
<p>するとsorce/_post/配下に[記事のタイトル].mdファイルが作成されます。<br>次にこの.mdファイルをマークダウンで内容を記述します。<br>内容が書き終わったら、ビルトインサーバを立ち上げて、プレビューしてみましょう</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
<p>確認ができたら前回と同様にGithub Pageへ公開する際のコマンドを実行すると、新しく記事を公開することができます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>ここまでが記事を公開する流れになります。</p>
<h2 id="テーマのカスタマイズ"><a href="#テーマのカスタマイズ" class="headerlink" title="テーマのカスタマイズ"></a>テーマのカスタマイズ</h2><p>hexoにはたくさんテーマがありますが、基本的にどれも設定ファイルとEJSテンプレートを修正することでテーマを自分なりにカスタマイズすることができます。</p>
<p>ejsとはいうゆるテンプレートエンジンで設定ファイルから値を読み込み、HTMLを生成するために使用されます。他のテンプレートエンジンを使ったことがある人にはかなり学習コストも低くすぐに使いこなせると思います。</p>
<p>私が使用しているicarusの場合、layout.ejsでhtml全体の構成を、その中でそれぞれの要素のejsをインクルードしています。変更したいejsファイルにそれぞれ修正を入れました。</p>
<p>細かい修正内容は省くとして、大まかな部分は設定ファイルの_config.ymlを修正すればいいだけなので、非常に簡単です。</p>
<p>今後自身のブログを始めたいという方にhexoを検討してみるものいいかもしれません。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexoでブログをはじめてみた中編]]></title>
      <url>http://devlog.site/hexo/Hexo-Blog-Start-2/</url>
      <content type="html"><![CDATA[<p><a href="http://devlog.site/2016/hexo/Hexo-Blog-Start/">Hexoでブログをはじめてみた-前編</a>の続きです。</p>
<p>ビルトインサーバでブログを立ち上げることができたと思います。<br>次にGithub Pagesへブログを公開してみましょう。<br><a id="more"></a></p>
<h3 id="設定ファイルの修正とプラグインのインストール"><a href="#設定ファイルの修正とプラグインのインストール" class="headerlink" title="設定ファイルの修正とプラグインのインストール"></a>設定ファイルの修正とプラグインのインストール</h3><p>Github Pagesへの公開には設定ファイルの修正が必要です。<br>_config.ymlファイルを修正します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim _config.yml</div><div class="line"></div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:&lt;アカウント名&gt;/&lt;アカウント名&gt;gituhub.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>設定ファイルの修正が終わったらGithubデプロイ用のプラグインをインストールします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h2 id="Github-Pagesに公開"><a href="#Github-Pagesに公開" class="headerlink" title="Github Pagesに公開"></a>Github Pagesに公開</h2><p>ここまで終わったらあとはデプロイするだけです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>このコマンドを叩くと1発でGithub Pagesに公開することができます。</p>
<h2 id="テーマの変更"><a href="#テーマの変更" class="headerlink" title="テーマの変更"></a>テーマの変更</h2><p>Github Pagesへの公開はできましたが、このままだとHexoデフォルトのテーマのままなので変更してみたいと思います。<br>今回はGithubに公開せれている<a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="external">hexo-theme-icarus</a>を使用してみました。<br>テーマはGithubに公開されているもの多いので気に入ったもので試してみて下さい。</p>
<p>まずGitからcloneしてきます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@github.com:ppoffice/hexo-theme-icarus.git theme/icarus</div></pre></td></tr></table></figure>
<p>clone後、icarus内の設定ファイルをリネイムします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd theme/icarus</div><div class="line">mv \_config.yml.example _config.yml</div></pre></td></tr></table></figure>
<p>次にHexoの設定ファイルを編集します。<br>設定ファイルのthemeを書き換えます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: icarus</div></pre></td></tr></table></figure>
<p>themeをデフォルトのlandscapeからicarusへ変更します。<br>ここまで終わったら1度Githubへデプロイします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>これでテーマが変わっていることが確認できると思います。<br>今回はここまでで、次回は記事の作成とテーマのカスタマイズを行います。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexoでブログをはじめてみた前編]]></title>
      <url>http://devlog.site/hexo/Hexo-Blog-Start/</url>
      <content type="html"><![CDATA[<p>自身の勉強と草を生やす為にHexoとGithub Pagesを使ってブログを書くことにしました。<br>早速、ブログの立ち上げ方をブログに書きたいと思います。<br>まずはローカルでHexoのビルトインサーバの立ち上げまでを行います。</p>
<a id="more"></a>
<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>必要なものとして</p>
<ul>
<li>Git</li>
<li>Githubアカウント</li>
<li>Github Pages</li>
</ul>
<p>上記は既に持っている前提です。</p>
<h2 id="Hexoの導入"><a href="#Hexoの導入" class="headerlink" title="Hexoの導入"></a>Hexoの導入</h2><h3 id="nvmインストール"><a href="#nvmインストール" class="headerlink" title="nvmインストール"></a>nvmインストール</h3><p>HexoはNode.jsなので、まずはNodeのインストールを行います。<br>Nodeのバージョン管理に便利なnvmを先にインストールします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">⋊&gt; ~ git clone git://github.com/creationix/nvm.git ~/.nvm/</div></pre></td></tr></table></figure>
<p>クローンが終わったら</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">⋊&gt; ~ source ~/.nvm/nvm.sh</div></pre></td></tr></table></figure>
<p>bashで叩かないとエラーが出るかもしれません。普段使ってるfishだとエラーが出ました。</p>
<h3 id="Nodeのインストール"><a href="#Nodeのインストール" class="headerlink" title="Nodeのインストール"></a>Nodeのインストール</h3><p>インストールできるNodeのバージョンを確認をします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">nvm ls-remote</div><div class="line">v0.1.14</div><div class="line">v0.1.15</div><div class="line">v0.1.16</div><div class="line">v0.1.17</div><div class="line">v0.1.18</div><div class="line">v0.1.19</div><div class="line">...</div></pre></td></tr></table></figure>
<p>私はこの当時最新だった4.6.2をインストールしました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm install 4.6.2</div></pre></td></tr></table></figure>
<p>無事インストールが終わりました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">v4.6.2</div></pre></td></tr></table></figure>
<h3 id="Hexoのインストール"><a href="#Hexoのインストール" class="headerlink" title="Hexoのインストール"></a>Hexoのインストール</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure>
<p>Hexoのインストールはこれで終了です。簡単！</p>
<h2 id="Hexoでブログを作ってみる"><a href="#Hexoでブログを作ってみる" class="headerlink" title="Hexoでブログを作ってみる"></a>Hexoでブログを作ってみる</h2><p>Hexoのインストールができたらブログを立ち上げてみましょう<br>今回はmyBlogという名前でブログを作成しました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init myBlog</div></pre></td></tr></table></figure>
<p>これで新規作成できました。<br>その後はディレクトリを移動し初期化を行います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd myBlog</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>そしてローカルでサーバを立ち上げてみると</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
<p><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> にアクセスすると、Hexoブログが表示されていることが確認できると思います。<br>ここまででHexoブログの立ち上げ方</p>
]]></content>
    </entry>
    
  
  
</search>
