<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Tensorとは何か？]]></title>
      <url>http://devlog.site/tensorflow/tensorflow4/</url>
      <content type="html"><![CDATA[<h2 id="TensorFlowのTensorって何？"><a href="#TensorFlowのTensorって何？" class="headerlink" title="TensorFlowのTensorって何？"></a>TensorFlowのTensorって何？</h2><p><a href="http://devlog.site/tensorflow/tensorflow3">こちらの記事</a>でオペレーションが扱うデータのことをTensorと書きましたが、このTensorって一体何なんでしょう？<br>今回はこのTensorについてもっと詳しく調べてみたいと思います。</p>
<p>公式サイトの説明は<a href="https://www.tensorflow.org/versions/r0.11/resources/dims_types.html" target="_blank" rel="external">こちら</a>になります。</p>
<a id="more"></a>
<h2 id="TensorFlowのTensorはデータ構造"><a href="#TensorFlowのTensorはデータ構造" class="headerlink" title="TensorFlowのTensorはデータ構造"></a>TensorFlowのTensorはデータ構造</h2><p>TensorFlowで言うところのTensorというのは扱うデータ構造のことで、これを使ってを色々なデータを表現しています。<br>このTensorはRankとShape、Data Typesを持っています。</p>
<h2 id="RankとShape"><a href="#RankとShape" class="headerlink" title="RankとShape"></a>RankとShape</h2><p>Rankは「テンソルの階数」、Shapeは「テンソルの形」のことを言います。</p>
<table>
<thead>
<tr>
<th style="text-align:left">Rank</th>
<th style="text-align:left">Shape</th>
<th style="text-align:left">Dimension</th>
<th style="text-align:left">例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">[]</td>
<td style="text-align:left">0次元</td>
<td style="text-align:left">s = 713</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">[D0]</td>
<td style="text-align:left">1次元</td>
<td style="text-align:left">v = [1.1,2.2,3.3]</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">[D0, D1]</td>
<td style="text-align:left">2次元</td>
<td style="text-align:left">m = [[1,2,3],[4,5,6],[7,8,9]]</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">[D0, D1, D2]</td>
<td style="text-align:left">3次元</td>
<td style="text-align:left">t = [[[1,2,3]],[[4,5,6]],[[7,8,9]]]</td>
</tr>
<tr>
<td style="text-align:left">N</td>
<td style="text-align:left">[D0,D1, …Dn-1]</td>
<td style="text-align:left">n次元</td>
</tr>
</tbody>
</table>
<p>このようにRankが0ならShapeは[]となり0次元の値で、<br>Rankが3ならShapeは[D0, D1, D2]で3次元の配列になるってことですね。</p>
<h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><table>
<thead>
<tr>
<th style="text-align:left">データタイプ</th>
<th style="text-align:left">解説</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">tf.float16</td>
<td style="text-align:left">16ビット浮動小数点</td>
</tr>
<tr>
<td style="text-align:left">tf.float32</td>
<td style="text-align:left">32ビット浮動小数点</td>
</tr>
<tr>
<td style="text-align:left">tf.float64</td>
<td style="text-align:left">64ビット浮動小数点</td>
</tr>
<tr>
<td style="text-align:left">tf.int8</td>
<td style="text-align:left">8ビット整数</td>
</tr>
<tr>
<td style="text-align:left">tf.int16</td>
<td style="text-align:left">16ビット整数</td>
</tr>
<tr>
<td style="text-align:left">tf.int32</td>
<td style="text-align:left">32ビット整数</td>
</tr>
<tr>
<td style="text-align:left">tf.int64</td>
<td style="text-align:left">64ビット整数</td>
</tr>
<tr>
<td style="text-align:left">tf.uint8</td>
<td style="text-align:left">符号無し8ビット整数</td>
</tr>
<tr>
<td style="text-align:left">tf.string</td>
<td style="text-align:left">可変長文字列</td>
</tr>
<tr>
<td style="text-align:left">tf.bool</td>
<td style="text-align:left">真偽値</td>
</tr>
</tbody>
</table>
<p>データタイプは格納するデータの型のことですね。</p>
<h2 id="テンソルについて"><a href="#テンソルについて" class="headerlink" title="テンソルについて"></a>テンソルについて</h2><p>TensorFlowのTensorと一般的にテンソルというと少し違いがあるようです。<br>一般的にテンソルというと数学的なテンソルのことです。<br>wikiから引用すると</p>
<blockquote>
<p>テンソル（英: tensor, 独: Tensor）とは、線形的な量または線形的な幾何概念を一般化したもので、基底を選べば、多次元の配列として表現できるようなものである。</p>
</blockquote>
<p>とあります。ちょっと難しいですが、テンソルは、数学の線形の量を表す概念でのことです。<br>スカラーやベクトルもテンソルの一種になります。</p>
<p>例えば、大きさのみを持つスカラーは階数0のテンソルと表し、同様に力の大きさとその向きを持つベクトルは階数1のテンソルとなります。<br>また加速度ベクトル間の関係などをあらわす線型変換は階数2のテンソルと言います。<br>ん〜難しいですが、こういう概念もきちんと理解していきたいですね。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pythonのwith構文について調べてみた]]></title>
      <url>http://devlog.site/python/python-with/</url>
      <content type="html"><![CDATA[<h2 id="with構文について"><a href="#with構文について" class="headerlink" title="with構文について"></a>with構文について</h2><p>TensorFlowでpython書いてるとよく見かけるwith構文ですが、きちんと理解していなかったのでこの機会に調べてみました。<br>簡単なメモです。<br><a id="more"></a></p>
<h2 id="with構文とは？"><a href="#with構文とは？" class="headerlink" title="with構文とは？"></a>with構文とは？</h2><p>with構文はファイルの読み書きなど後処理が必要なものに対して安全にその処理を行える機能です。<br>簡単なファイルを開くコードを見てみましょう。</p>
<p>まずはwith構文を使っていないコード</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">text = <span class="keyword">None</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">  text = open(<span class="string">"text.txt"</span>, <span class="string">'w'</span>)</div><div class="line">  <span class="keyword">try</span>:</div><div class="line">    text.write(<span class="string">"Hello, world!"</span>)</div><div class="line">  <span class="keyword">except</span>:</div><div class="line">    <span class="keyword">raise</span></div><div class="line"><span class="keyword">finally</span>:</div><div class="line">  <span class="keyword">if</span> text:</div><div class="line">    text.close()</div></pre></td></tr></table></figure>
<p>厳密に書こうとすると結構大変ですよね。<br>次にwithを使った書き方についてですが、</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> ファイル読み込み <span class="keyword">as</span> 変数:</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>こんな感じの構文になります。<br>先ほどのファイルを開くコードを書き換えると</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"text.txt"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> text:</div><div class="line">    text.write(<span class="string">"Hello, world!"</span>)</div></pre></td></tr></table></figure>
<p>すっきりしましたね。これだけでwithを抜けた際にファイルを自動的に閉じてくれます。</p>
<h2 id="withが使えるオブジェクト"><a href="#withが使えるオブジェクト" class="headerlink" title="withが使えるオブジェクト"></a>withが使えるオブジェクト</h2><p>with構文はコードをスッキリ簡潔にしてくれるのでいろんなところで使いたいですが、<br>使える場合とそうでない場合があります。</p>
<p>withが使えるのは<strong>enter</strong>メソッドと<strong>exit</strong>メソッドの両方が定義されているオブジェクトの場合です。<br>例えばこんなコードを実行してみます。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__init__'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__enter__'</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__exit__'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__del__'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'hello'</span></div><div class="line"></div><div class="line"><span class="keyword">with</span> Test() <span class="keyword">as</span> obj:</div><div class="line">    obj.say()</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'end'</span></div></pre></td></tr></table></figure>
<p>結果は次のようになります。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">__init__</div><div class="line">__enter__</div><div class="line">hello</div><div class="line">__exit__</div><div class="line">end</div><div class="line">__del__</div></pre></td></tr></table></figure>
<p>withを使うと<strong>enter</strong>メソッドと<strong>exit</strong>メソッドが呼び出されているのがわかると思います。<br>withを使いたい時は<strong>enter</strong>メソッドと<strong>exit</strong>メソッドをきちんと定義してあげましょう。</p>
<h2 id="TensorFlowでよく使うwith"><a href="#TensorFlowでよく使うwith" class="headerlink" title="TensorFlowでよく使うwith"></a>TensorFlowでよく使うwith</h2><p>ファイルを開く際に安全にcloseしてくれるwith構文ですが、TensorFlowではよくセッションを使用する際に使われていますね。<br>ということはSessionを安全に閉じてくれてるってことです。</p>
<p>なんでwith構文が使われているんだろうなぁと思っていましたが、そういった理由があったんですね。<br>TensorFlowのリファレンスを見てみるとSessionクラスには確かに<strong>enter</strong>メソッドと<strong>exit</strong>メソッドが定義されています。</p>
<blockquote>
<p>tf.Session.__enter__()<br>tf.Session.__exit__(exec_type, exec_value, exec_tb)</p>
</blockquote>
<h2 id="withのネスト"><a href="#withのネスト" class="headerlink" title="withのネスト"></a>withのネスト</h2><p>withはネストも出来るみたいです。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> A() <span class="keyword">as</span> a:</div><div class="line">    <span class="keyword">with</span> B() <span class="keyword">as</span> b:</div></pre></td></tr></table></figure>
<p>このようにネストして書くこともでき、またカンマで繋げても同じ意味になるようです。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> A() <span class="keyword">as</span> a, B() <span class="keyword">as</span> b:</div></pre></td></tr></table></figure>
<p>終わり</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IPython使ってみた]]></title>
      <url>http://devlog.site/python/ipython1/</url>
      <content type="html"><![CDATA[<h2 id="IPython使ってみた"><a href="#IPython使ってみた" class="headerlink" title="IPython使ってみた"></a>IPython使ってみた</h2><p>TensorFlowを勉強してて出てきたIPythonという言葉…なんかだよく分からなかったので調べてみました。</p>
<h2 id="IPythonとは？"><a href="#IPythonとは？" class="headerlink" title="IPythonとは？"></a>IPythonとは？</h2><p>「あいぱいそん」って読むらしいです。<br>Wikiを見てみると<br><a id="more"></a></p>
<blockquote>
<p>IPython (あいぱいそん) はPythonを対話的に実行するためのシェルである。オリジナルのPythonに比較して、型推定を強化し、対話的実行のための文法を追加してあり、コード・ハイライティングおよびタブによる補完が行える。</p>
</blockquote>
<p>とあります。要するに、IPythonは対話的に実行できてタブ補完とかしてくれて色とかついて見やすい便利なやつってことっぽいです。<br>まぁ使ってみた方が早そうですねw</p>
<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>私の環境はmacでOS X El Capitanです。<br>pythonのバージョンは2.7.11です。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python -V</div><div class="line">Python 2.7.11</div></pre></td></tr></table></figure>
<p>インストールにはpipコマンドを使用します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install ipython</div></pre></td></tr></table></figure>
<h2 id="起動してみる"><a href="#起動してみる" class="headerlink" title="起動してみる"></a>起動してみる</h2><p>インストールが終わったら早速起動してみましょう。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ipython</div></pre></td></tr></table></figure>
<p>起動したら<code>import t</code>と入力してTABキーを押してみましょう。<br>すると</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [1]: import t</div><div class="line">   tabnanny        terminalcommand this            tkColorChooser  tkSimpleDialog  traceback        </div><div class="line">   tarfile         termios         thread          tkCommonDialog  toaiff          traitlets        </div><div class="line">   telnetlib       test            threading       tkFileDialog    token           ttk             &gt;</div><div class="line">   tempfile        tests           time            tkFont          tokenize        tty              </div><div class="line">   tensorflow      textwrap        timeit          tkMessageBox    trace           turtle</div></pre></td></tr></table></figure>
<p>こんな感じで候補の一覧が出てきます！これは便利！<br>ちゃんとインポートしたモジュールの中も補完してくれます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">In [2]: tf.ze</div><div class="line">              tf.zeros             tf.zeros_like                                           </div><div class="line">              tf.zeros_initializer tf.zeta</div></pre></td></tr></table></figure>
<p>今まではpythonコマンドで対話的に実行してたんですが、これは便利ですね。</p>
<h2 id="便利な機能"><a href="#便利な機能" class="headerlink" title="便利な機能"></a>便利な機能</h2><h3 id="イントロスペクション"><a href="#イントロスペクション" class="headerlink" title="イントロスペクション"></a>イントロスペクション</h3><p>オブジェクトに?をつけてやると対象の情報が表示されます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">In [1]: ipython = &quot;Great!&quot;</div><div class="line">In [2]: ipython?</div><div class="line">Type:        str</div><div class="line">String form: Great!</div><div class="line">Length:      6</div><div class="line">Docstring:  </div><div class="line">str(object=&apos;&apos;) -&gt; string</div><div class="line"></div><div class="line">Return a nice string representation of the object.</div><div class="line">If the argument is a string, the return value is the same object.</div></pre></td></tr></table></figure>
<p>また関数に??をつけるとソースコードも表示されるようです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">In [1]: get_ipython??</div><div class="line">Signature: get_ipython()</div><div class="line">Source:   </div><div class="line">    def get_ipython(self):</div><div class="line">        &quot;&quot;&quot;Return the currently running IPython instance.&quot;&quot;&quot;</div><div class="line">        return self</div><div class="line">File:      ~/.pyenv/versions/2.7.11/envs/tensorflow0.10/lib/python2.7/site-packages/IPython/core/interactiveshell.py</div><div class="line">Type:      instancemethod</div></pre></td></tr></table></figure>
<h3 id="マジックコマンド"><a href="#マジックコマンド" class="headerlink" title="マジックコマンド"></a>マジックコマンド</h3><p>マジックコマンドはIPythonの用の便利コマンドで頭に%がつくものです。<br>公式のドキュメントは<a href="http://ipython.readthedocs.io/en/stable/interactive/magics.html" target="_blank" rel="external">こちら</a></p>
<p>便利そうなコマンドがたくさんありますね。</p>
<table>
<thead>
<tr>
<th style="text-align:left">コマンド</th>
<th style="text-align:left">説明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">%lsmagic</td>
<td style="text-align:left">利用できるマジックコマンドを表示する</td>
</tr>
<tr>
<td style="text-align:left">%hist</td>
<td style="text-align:left">または %history    コマンドの履歴を表示する</td>
</tr>
<tr>
<td style="text-align:left">%paste</td>
<td style="text-align:left">クリップボードのコードをペーストして実行する</td>
</tr>
<tr>
<td style="text-align:left">%run</td>
<td style="text-align:left">ファイルに保存されているスクリプトを実行する</td>
</tr>
<tr>
<td style="text-align:left">%time</td>
<td style="text-align:left">単一ステートメントの実行時間を測定し表示する</td>
</tr>
<tr>
<td style="text-align:left">%timeit</td>
<td style="text-align:left">ステートメントを複数回実行して平均実行時間を表示する</td>
</tr>
<tr>
<td style="text-align:left">%save</td>
<td style="text-align:left">コマンドの実行履歴をファイルに保存する</td>
</tr>
<tr>
<td style="text-align:left">%reset</td>
<td style="text-align:left">変数や名前空間などをクリアする</td>
</tr>
</tbody>
</table>
<p>特に%saveは良さそうですね。IPythonでああでもない、こうでもないって適当に試した履歴をファイルに保存しておきたいってことは多そうです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">In [21]: %save save.py 1-20</div></pre></td></tr></table></figure>
<p>こんな感じでファイルに保存できるようです。</p>
<h2 id="終了"><a href="#終了" class="headerlink" title="終了"></a>終了</h2><p>終了するときはexitで抜けられます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">In [1]: exit</div></pre></td></tr></table></figure>
<h2 id="TensorFlowのInteractiveSession"><a href="#TensorFlowのInteractiveSession" class="headerlink" title="TensorFlowのInteractiveSession"></a>TensorFlowのInteractiveSession</h2><p>今後IPythonをTensorFlowの勉強に使いたいと思いますが、そんな時に便利なのが、InteractiveSessionです。<br>TensorFlowはまずグラフを作り、Sessionを実行するという流れですが、対話的に作業する際にはグラフを作り終えない状態で、Sessionで実行してみたい場合があります。<br>そこでInteractiveSessionを使うと途中で色々と確認しながら作業を進められるということですね。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[機械学習について調べてみた]]></title>
      <url>http://devlog.site/machine-learning/machine-learning1/</url>
      <content type="html"><![CDATA[<h1 id="機械学習とは何か？"><a href="#機械学習とは何か？" class="headerlink" title="機械学習とは何か？"></a>機械学習とは何か？</h1><p>今回はそもそも機械学習とは何か？ということを学んでいきたいと思います。</p>
<h2 id="機械学習とは一言で"><a href="#機械学習とは一言で" class="headerlink" title="機械学習とは一言で"></a>機械学習とは一言で</h2><p>機械学習についてネットで調べると色々な記事があり、たくさんの専門用語が出てきて調べれば調べるほどよくわかりません。<br>そんな中<a href="http://www.sas.com/ja_jp/insights/analytics/machine-learning.html" target="_blank" rel="external">こちら</a>のサイトが分かりやすかったので、少し引用させていただくと</p>
<a id="more"></a>
<blockquote>
<p>機械学習とは、データから反復的に学習し、そこに潜むパターンを見つけ出すことです。<br>そして学習した結果を新たなデータにあてはめることで、パターンにしたがって将来を予測することができます。</p>
</blockquote>
<p>とのことです。<br>簡潔に言うと機械学習とは「パターン認識」ってことですね。<br>そのパターンを見つけ出す過程のことを学習と呼んでいるようです。</p>
<p>そしてパターンがわかってしまえば、新たなデータがそのパターンに当てはまるかを調べればいいだけなので、<br>予測することができるってわけですね。</p>
<h2 id="機械学習は何の役に立つのか？"><a href="#機械学習は何の役に立つのか？" class="headerlink" title="機械学習は何の役に立つのか？"></a>機械学習は何の役に立つのか？</h2><p>機械学習はパターンを認識するものということですが、一体どんなことに役立つのでしょうか？<br>いくつか事例を考えてみましょう。</p>
<ol>
<li>画像認識<ul>
<li>ex)写真の特徴のパターンを摘出することで、他の写真と一致するかどうかは判定する</li>
</ul>
</li>
<li>声紋認証<ul>
<li>ex)音声の特徴パターンを摘出することで、他人の声と本人の声かどうか判定する</li>
</ul>
</li>
<li>おすすめの商品<ul>
<li>ex)自分と似た行動パターンを持つ人を摘出することで、購入履歴などからおすすめの商品を判定する</li>
</ul>
</li>
</ol>
<p>便利な機能にたくさん使われているみたいですね。<br>と、やはりどの事例もパターンを見つけ出して、それを新しいデータに適応して予測するということをやっているようですね。<br>機械学習を学ぶということは、このパターンを見つけ出す様々な方法やその精度を上げるにはどうしたらいいのかということを学ぶってことのようです。</p>
<h2 id="なぜ機械学習が流行っているのか？"><a href="#なぜ機械学習が流行っているのか？" class="headerlink" title="なぜ機械学習が流行っているのか？"></a>なぜ機械学習が流行っているのか？</h2><p>最近、AlphaGoというプログラムが囲碁で世界トップクラスの棋士に勝ったり、機械学習でGoogle翻訳が良くなったとか、はたまた宇宙人の探索に機械学習を使うとか、そんな機械学習についてのニュースを良く目にしますよね。なぜいま機械学習はこんなに流行っているんでしょう？</p>
<p>結論から言うとストレージの低価格化とコンピューティング・パワーが上昇した為です。</p>
<p>機械学習のブームは今回が初めてではなく、過去にも何回かありました。<br>流行っては廃れ、また流行っては廃れを繰り返して、またここ最近流行りがきています。</p>
<p>では今こんなにも流行っている機械学習がなぜ過去には廃れてしまったかというと、<br>機械学習は先にも述べたように膨大なサンプルデータとそこからパターンを見つけ出す計算処理を行う必要があったからです。</p>
<p>膨大なサンプルデータを保持しておく為には大容量のストレージが必要ですし、その膨大なサンプルデータからパターンを見つけだす為にはさらに膨大な量の計算処理を行う必要があり、それにはかなりのコンピューティング・パワーを必要とします。<br>昔は今よりストレージの確保も容易ではなくマシーンのパワーもなかった為、ブームは去ってしまったようです。</p>
<p>逆を言うと今はストレージは安く手に入りCPUやGPUの性能も向上しているので個人でも簡単に機械学習を試すことできる為、<br>こんなにも流行っているんですね。</p>
<h2 id="機械学習の進め方"><a href="#機械学習の進め方" class="headerlink" title="機械学習の進め方"></a>機械学習の進め方</h2><p>流行っているとなればやはりやるしかない、ということで機械学習に取り組んでいきたいのですが、どうゆう風に進めるべきなんでしょうか。<br>機械学習の進め方としてはまず、どんなデータからどんなパターンを摘出したいかを考えるところからはじめるのが良さそうです。<br>それによって機械学習で使用するアルゴリズムや処理が変わると思いますので、まずは機械学習を利用して何がしたいかを考えてみましょう。</p>
<p>そして、何がしたいかが決まればサンプルデータの収集を行い、ストレージに保存、機械学習を行い、学習結果を分析、結果からフィードバックを得て、より精度の高いパターンを摘出するといった流れになると思います。</p>
<p>まとめると</p>
<ol>
<li>機械学習でどんなことがしたいかを考える</li>
<li>サンプルデータの収集を行う</li>
<li>収集したデータを保存する</li>
<li>機械学習でパターンを摘出する</li>
<li>結果を分析する</li>
<li>フィードバックからより良く改善していく</li>
</ol>
<p>こんな感じでしょうか。<br>専門的なアルゴリズムや技法は進める中で順々に学んでいこうと思います。いきなり難しい数式の勉強とかやっても挫折しそうなので…</p>
<h2 id="機械学習で大事なところ"><a href="#機械学習で大事なところ" class="headerlink" title="機械学習で大事なところ"></a>機械学習で大事なところ</h2><p>機械学習はパターン認識だと言いましたが、パターン認識とは具体的にどんなことでしょうか？</p>
<p>人間は文字を見たとき、例えば「おはよう」という文字を見たとき、これが文字で朝の挨拶だと認識できます。<br>また、犬の写真を見たときにそれが写真で犬が写っていると認識できます。<br>これと同じことを機械が出来るようにするにはどうしたらいいでしょう？</p>
<p>まず人間はどうやって文字や写真を認識しているのか考えてみましょう。<br>詳しくは脳科学の話になってしまうと思うのでわかりませんが、<br>人間は外部からの情報の<strong>特徴</strong>を摘出し、その意味を正しく認識することによってそれが何であるかを理解しています。</p>
<p>文字には文字の特徴、写真には写真の特徴、それぞれの特徴があります。その特徴を摘出することができれば、<br>機械にも同じことが出来るようになるはずなんです。</p>
<p>そう機械学習で大事なことはこの特徴を見つけ出すことです。</p>
<h2 id="特徴はどうやって決まるの？"><a href="#特徴はどうやって決まるの？" class="headerlink" title="特徴はどうやって決まるの？"></a>特徴はどうやって決まるの？</h2><p>外部の情報から特徴を見つけ出せれば機械にもそれがどんなものか認識できるということですが、その特徴はどうやって決まっているのでしょうか？<br>例えば「9」という数字の特徴は上に円があって円の右下から尻尾がはえ下がって少し丸まっているといった感じでしょうか。<br>このように数字や文字などは簡単に特徴が思いつくと思います。</p>
<p>では迷惑メールか、そうでない通常のメールかを判断しようとした場合、迷惑メールの特徴とはどういったものでしょうか？<br>“無料”とか”出会い”とか”今すぐ”などといった言葉が多く含まれればといった感じでしょうか？<br>これは少し難しいですよね。</p>
<p>ですが機械はどういった特徴があるものが迷惑メールなのかという、最初の基準となるデータがなければ学習をスタートすることはできません。つまり機械学習では対象のデータがどんな意味を持つかということは人間が決めなければならないのです。</p>
<h2 id="ディープラーニング"><a href="#ディープラーニング" class="headerlink" title="ディープラーニング"></a>ディープラーニング</h2><p>機械学習では人間が特徴を決める必要があると先ほど書きましたが、実はその特徴すら機械が見つけ出すことも可能なんです。<br>それが機械学習の一種であるディープラーニング(深層学習)です。</p>
<p>このディープラーニングは様々な分野で活用されており、車の自動運転や冒頭でも書いたAlphaGoにも利用されており今後より研究開発が進むと考えられています。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlowの基礎]]></title>
      <url>http://devlog.site/tensorflow/tensorflow3/</url>
      <content type="html"><![CDATA[<h1 id="TensorFlow基礎"><a href="#TensorFlow基礎" class="headerlink" title="TensorFlow基礎"></a>TensorFlow基礎</h1><p>今回はTensorFlowの計算処理の流れを見ていきたいと思います。</p>
<h2 id="TensorFlowの計算処理の流れ"><a href="#TensorFlowの計算処理の流れ" class="headerlink" title="TensorFlowの計算処理の流れ"></a>TensorFlowの計算処理の流れ</h2><p><a href="http://devlog.site/tensorflow/tensorflow2/">前回のTensorFlowで四則演算をやってみた</a>でも少しだけ書きましたが、<br>ざっくりオペレーションを先に定義し、セッションを使用してそれを実行するという流れになります。<br>このオペレーションやセッションとはどんなものなんでしょうか？<br><a id="more"></a></p>
<p>もう少し詳しく調べてみると、TensorFlowでは計算処理にグラフを用いるとのことです。<br>グラフというのはエクセルとかでよく見る折れ線グラフや円グラフのことではなく、<br><a href="https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A9%E3%83%95%E7%90%86%E8%AB%96" target="_blank" rel="external">こちらのwikiのグラフ理論</a>のことらしいです。</p>
<p>グラフはノードとエッジから構成されるデータ構造のことです。またTensorFlowにおいてのノードはop(オペレーション)と呼ばれ、どうやら一つの計算処理に対応しているとのこと。<br>オペレーションというのは簡単に言うと何かしらの計算処理を行う一つの処理ブロックということのようです。</p>
<p>このopはTensor(テンソル)と呼ばれる行列形式のデータを受け取り、何かしらの計算処理を行い、結果を次のopへ渡していきます。<br>次のopでも受け取った行列形式のデータを使用し、同じように計算処理を行いさらに次のopへ結果を渡します。<br>このように次々にopにデータを受け渡し計算処理を行うことで、最終的な結果を得ることができるという流れです。</p>
<p>次に先ほど出てきたエッジについてです。<br>エッジはノードとノードを繋ぐものでデータをどのノードからどのノードへ受け渡すかを決めるものです。<br>単純にノードで処理した結果を次にどのノードで処理されるかというだけのようですね。</p>
<p>最後にセッションについてです。<br>TensorFlowでは各opごとにCPUコアやGPUコアのリソースをどの程度割り当てるかを指定することができます。<br>パワーを必要とする計算処理には多くのリソースを割り当て、簡単な処理には少ないリソースで済ませるという割り振りができるようでうす。<br>この割り当てを担うのがセッションのようです。そしてセッションは各opの実行も行います。</p>
<p>簡単なコードを見てみましょう。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line"><span class="comment"># 定数の定義</span></div><div class="line">const  = tf.constant(<span class="number">2</span>)</div><div class="line">const1 = tf.constant(<span class="number">3</span>)</div><div class="line">const2 = tf.constant(<span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="comment"># add_opノード(op)を定義</span></div><div class="line">add_op  = tf.add(const, const1)</div><div class="line"><span class="comment"># add_op1ノード(op)を定義、同時にadd_opの結果をadd_op1へ受け渡すエッジ</span></div><div class="line">add_op1 = tf.add(add_op, const2)</div><div class="line"></div><div class="line"><span class="comment"># セッション</span></div><div class="line">sess = tf.Session()</div><div class="line"><span class="comment"># add_opの実行</span></div><div class="line">sess.run(add_op)</div><div class="line"><span class="comment"># add_op1の実行、結果をresultへ格納</span></div><div class="line">result = sess.run(add_op1)</div><div class="line"></div><div class="line">print(result)</div></pre></td></tr></table></figure>
<p>足し算を2回行うだけの処理です。実行すると9が出力されると思います。<br>コメントでコード中に注釈を入れているのでわかると思いますが、<br>それぞれがノード(op)、エッジ、セッションになります。</p>
<p>これをtensorboardでグラフ出力してみるとこんな感じになります。</p>
<p>オペレーションAddとAdd_1がエッジで繋がれ、AddにはConst、Const_1が、Add_1にはConst_2が入力として渡されているのがわかりますね。<br>なんとなくTensorFlowの計算処理の流れがわかった気がします！</p>
<h2 id="TensorBoardについて"><a href="#TensorBoardについて" class="headerlink" title="TensorBoardについて"></a>TensorBoardについて</h2><p>先ほど出てきたTensorBoardとは何かというと、TensorFlowに搭載されている可視化ツールのことです。<br>TensorBoardを使用することでグラフを可視化でき、ブラウザで確認することができます。</p>
<p>TensorBoardでグラフ出力するには以下のコードを追加します。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tf.train.SummaryWriter(<span class="string">'./'</span>, sess.graph)</div></pre></td></tr></table></figure>
<p>追記したファイルを実行するとTensorBoard用のファイルが生成されます。<br>TensorBoard用のファイルが生成されたら、次のコマンドを実行します。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tensorboard --logdir=[TensorBoard用のファイルがあるディレクトリ]</div></pre></td></tr></table></figure>
<p>ブラウザでlocalhost:6006にアクセスするとTensorBoardが立ち上がっていることが確認できると思います。<br>TensorBoardは便利な使い方が色々あるみたいなので今後もっと詳しく調べてみたいと思います。</p>
<p>今回はここまでです。<br>次回はTensorFlowを使う上でもっと基本的な機械学習とは何かについて学んでいこうと思います。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlowで四則演算をやってみた]]></title>
      <url>http://devlog.site/tensorflow/tensorflow2/</url>
      <content type="html"><![CDATA[<h1 id="TensorFlowで四則演算をやってみた"><a href="#TensorFlowで四則演算をやってみた" class="headerlink" title="TensorFlowで四則演算をやってみた"></a>TensorFlowで四則演算をやってみた</h1><p><a href="http://devlog.site/tensorflow/tensorflow1/">前回</a>環境を整えたので、今回はTensorFlowで四則演算を行ってみました。</p>
<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TensorFlow全くの初心者ですので、右も左もわかってません。間違ったこともたくさん書いてると思います。基本的に自分の為にメモしておく程度なのであしからずです。</p>
<h2 id="四則演算"><a href="#四則演算" class="headerlink" title="四則演算"></a>四則演算</h2><p>まずはTensorFlowで四則演算を行ってみたいと思います。<br>こんな感じのコードになります。<br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line"><span class="comment"># 定数宣言</span></div><div class="line">const1 = tf.constant(<span class="number">2</span>)</div><div class="line">const2 = tf.constant(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># 足し算オペレーション</span></div><div class="line">add_op = tf.add(const1, const2)</div><div class="line"></div><div class="line"><span class="comment"># セッションオブジェクト</span></div><div class="line">sess = tf.Session()</div><div class="line"></div><div class="line">result = sess.run(add_op)</div><div class="line">print(result)</div><div class="line"></div><div class="line"><span class="comment"># 引き算オペレーション</span></div><div class="line">sub_op = tf.sub(const1, const2)</div><div class="line">result = sess.run(sub_op)</div><div class="line">print(result)</div><div class="line"></div><div class="line"><span class="comment"># 掛け算オペレーション</span></div><div class="line">mul_op = tf.mul(const1, const2)</div><div class="line">result = sess.run(mul_op)</div><div class="line">print(result)</div><div class="line"></div><div class="line"><span class="comment"># 割り算オペレーション</span></div><div class="line">div_op = tf.div(const1, const2)</div><div class="line">result = sess.run(div_op)</div><div class="line">print(result)</div></pre></td></tr></table></figure>
<p>これを適当な名前(今回はmath.py)で保存して実行すると</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">python math.py</div><div class="line">5</div><div class="line">-1</div><div class="line">6</div><div class="line">0</div></pre></td></tr></table></figure>
<p>と出力されます。普通の四則演算のコードと全然違いますよね。<br>1つずつ解説していきましょう。</p>
<p>1行目</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div></pre></td></tr></table></figure>
<p>これはtensorflow moduleをインポートして、それをtfとして使用するということです。</p>
<p>4行目</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const1 = tf.constant(<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>const1という定数を宣言し、その定数に2を設定しています。</p>
<p>8行目</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add_op = tf.add(const1, const2)</div></pre></td></tr></table></figure>
<p>const1とconst2を足し算するオペーレションadd_opを設定</p>
<p>11行目</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sess = tf.Session()</div></pre></td></tr></table></figure>
<p>セッションの作成</p>
<p>13行目</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result = sess.run(add_op)</div></pre></td></tr></table></figure>
<p>定義したオペレーションの実行</p>
<p>足し算以降の引き算、掛け算、割り算はやってることは同じです。<br>とこのように、TensorFlowでは最初に演算するオペレーションを定義し、その後でセッションを使用してその演算を行うという流れになります。<br>基本的な概念は一旦置いておいて、ざっとこんな感じのようです。</p>
<p>ところで気になった方もいるかもしれませんが、割り算の結果が0になってしまっていますね。<br>2 / 3 なので0.666…になるはず？ですよね。いえ、これは間違いではなく、正しい結果です。<br>tf.divはリファレンスを見てみると</p>
<blockquote>
<p>テンソルの数値型がint等の浮動小数でない型である場合、小数点以下切り捨て</p>
</blockquote>
<p>となっているので小数点以下が切り捨てられてしまって0になっているんですね。</p>
<p>小数点以下を切り捨てたくない場合はtf.truedivを使用してます。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div_op = tf.truediv(const1, const2)</div><div class="line">result = sess.run(div_op)</div><div class="line">print(result)</div></pre></td></tr></table></figure>
<p>こうすることで正しく0.666…が出力されます。</p>
<p>次回は基礎的な概念を少し学んでみたいと思います。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlowの環境を作ってみた]]></title>
      <url>http://devlog.site/tensorflow/tensorflow1/</url>
      <content type="html"><![CDATA[<h1 id="TensorFlowの環境を作ってみた"><a href="#TensorFlowの環境を作ってみた" class="headerlink" title="TensorFlowの環境を作ってみた"></a>TensorFlowの環境を作ってみた</h1><p>機械学習の勉強を始めようと思い、今回はTensorFlowの環境を作成してみました。</p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>私の環境はmacでOS X El Capitanです。まだmacOS Sierraにはあげてません…<br>TensorFlowのバージョンは0.10を使用します。<br>HomeBrewを使用しますので予めインストールしておいて下さい。<br><a id="more"></a></p>
<h2 id="pythonのインストール"><a href="#pythonのインストール" class="headerlink" title="pythonのインストール"></a>pythonのインストール</h2><p>TensorFlowではpythonを使用するので事前にインストールしておきます。<br>macには一応デフォルトでpythonがインストールされえていますが、TensorFlow用に別バージョンのpythonを使用したいと思います。<br>インストールにはバージョン管理が便利なpyenvを使用しますので先にこちらをインストールしておきます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install pyenv</div></pre></td></tr></table></figure>
<p>~/.bash_profileに以下を追加します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PATH=&quot;$HOME/.pyenv/bin:$PATH&quot;</div><div class="line">eval &quot;$(pyenv init -)&quot;</div></pre></td></tr></table></figure>
<p>pyenvのインストールが終わったら現在使用されているpythonを確認してみましょう</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pyenv versions</div><div class="line">* system (set by /Users/hoge/.pyenv/version)</div></pre></td></tr></table></figure>
<p>macのデフォルトのpythonになっていますね。<br>それではpythonをインストールしてみましょう。今回は2.7.11と3.5.1をインストールしてみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pyenv install 2.7.11</div><div class="line">pyenv install 3.5.1</div></pre></td></tr></table></figure>
<p>インストールが終わったら、対象のバージョンが追加されているか確認してみましょう。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pyenv versions</div><div class="line">* system (set by /Users/hoge/.pyenv/version)</div><div class="line">  2.7.11</div><div class="line">  3.5.1</div></pre></td></tr></table></figure>
<p>2.7.11と3.5.1が追加されていることがわかりますね。<br>ただしこのままだとmacにデフォルトで入っているpythonを使用する設定になっていますのでバージョンの切り替えを行います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pyenv global 2.7.11</div><div class="line">pyenv versions</div><div class="line">  system</div><div class="line">* 2.7.11 (set by /Users/hoge/.pyenv/version)</div><div class="line">  3.5.1</div></pre></td></tr></table></figure>
<p>globalでバージョンの切り替えを行うことができます。systemに付いていた✳︎マークが2.7.11のところに付いているのがわかると思います。これで2.7.11へ切り替わりました。</p>
<h2 id="pyenv-virtualenvのインストール"><a href="#pyenv-virtualenvのインストール" class="headerlink" title="pyenv-virtualenvのインストール"></a>pyenv-virtualenvのインストール</h2><p>今回はTensorFlow用の仮想環境を作成してその上でTensorFlowを動かしてみたいと思います。<br>仮想環境作成に便利なpyenv-virtualenvを使用します。まずはインストールから。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install pyenv-virtualenv</div></pre></td></tr></table></figure>
<p>インストールはbrewコマンドで1発で済みます。楽チンですね。</p>
<h2 id="仮想環境の作成"><a href="#仮想環境の作成" class="headerlink" title="仮想環境の作成"></a>仮想環境の作成</h2><p>pyenv-virtualenvのインストールが終わったら早速、仮想環境を作成してみたいと思います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv virtualenv [pyenvのバージョン] [仮想環境名]</div></pre></td></tr></table></figure>
<p>このコマンドで仮想環境が作れます。<br>今回はTensorFlowのバージョン0.10を使用するので仮想環境名はtensorflow0.10として作成してみます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv virtualenv 2.7.11 tensorflow0.10</div></pre></td></tr></table></figure>
<p>作成が終わったらpyenv versionsコマンドをた実行してみましょう</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pyenv versions</div><div class="line">  system</div><div class="line">* 2.7.11 (set by /Users/hoge/.pyenv/version)</div><div class="line">  2.7.11/envs/tensorflow0.10</div><div class="line">  3.5.1</div><div class="line">  tensorflow0.10</div></pre></td></tr></table></figure>
<p>2.7.11/envs/tensorflow0.10とtensorflow0.10が追加されていることがわかりますね。pyenv globalコマンドでバージョンを切り替えましょう</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv global tensorflow0.10</div></pre></td></tr></table></figure>
<p>ここまでで仮想環境の作成が終了です。<br>仮想環境へ入るにはアクティベートコマンドを実行します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv activate</div></pre></td></tr></table></figure>
<p>これで仮想環境へ入ることができます。仮想環境から出る場合は以下のコマンドを実行します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyenv deactivate</div></pre></td></tr></table></figure>
<h2 id="TensorFlowのインストール"><a href="#TensorFlowのインストール" class="headerlink" title="TensorFlowのインストール"></a>TensorFlowのインストール</h2><p>ここからは先ほど作成した仮装環境上で行って下さい。<br>TensorFlowのインストールにはPyPIを使用します。PyPIはPythonのパッケージ管理ツールで、今回使用するpython2.7.11にはデフォルトでインストールされています。<br>コマンドはpipになります。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip -V</div><div class="line">pip 9.0.1 from /Users/hoge/.pyenv/versions/2.7.11/envs/tensorflow0.10/lib/python2.7/site-packages (python 2.7)</div></pre></td></tr></table></figure>
<p>PyPIを使用してTensorFlowをインストールするのですが、TensorFlowはPyPIのパッケージには登録されていないのでURLを指定してインストールを行います。</p>
<p>またTensorFlowにはPC環境に応じたバージョンがいくつかあり、ご自身のPC環境に応じたバージョンを使用して下さい。<br><a href="https://www.tensorflow.org/versions/r0.10/get_started/os_setup.html#pip-installation" target="_blank" rel="external">TensorFlow Pip installation</a>こちらから確認できます。</p>
<p>PC環境の違いはGPUがあるかないか、OSはLinuxかMacか、pythonは2.7か3.4もしくは3.5<br>かといった違いです。<br>私の場合はGPUなし、Mac、python2.7になりますので以下のようにインストールを行いました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.10.0-py2-none-any.whl</div><div class="line">pip install --upgrade $TF_BINARY_URL</div></pre></td></tr></table></figure>
<p>これでTensorFlowのインストールは終了です。</p>
<h2 id="TensorFlowの動作確認"><a href="#TensorFlowの動作確認" class="headerlink" title="TensorFlowの動作確認"></a>TensorFlowの動作確認</h2><p>動作確認は<a href="https://www.tensorflow.org/versions/r0.10/get_started/os_setup.html#test-the-tensorflow-installation" target="_blank" rel="external">公式サイト</a>にもあるようにコマンドラインからpythonコマンドで行います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line">...</div><div class="line">&gt;&gt;&gt; import tensorflow as tf</div><div class="line">&gt;&gt;&gt; hello = tf.constant(&apos;Hello, TensorFlow!&apos;)</div><div class="line">&gt;&gt;&gt; sess = tf.Session()</div><div class="line">&gt;&gt;&gt; print(sess.run(hello))</div><div class="line">Hello, TensorFlow!</div><div class="line">&gt;&gt;&gt; a = tf.constant(10)</div><div class="line">&gt;&gt;&gt; b = tf.constant(32)</div><div class="line">&gt;&gt;&gt; print(sess.run(a + b))</div><div class="line">42</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>これで無事にTensorFlowが動作していることが確認できました。<br>今後はこのTensorFlowで遊んでみたいと思います。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexoでブログをはじめてみた後編]]></title>
      <url>http://devlog.site/hexo/Hexo-Blog-Start-3/</url>
      <content type="html"><![CDATA[<p><a href="http://devlog.site/2016/hexo/Hexo-Blog-Start-2/">Hexoでブログをはじめてみた-中編</a>の続きです。</p>
<p>Github Pagesにブログを公開できたら過ぎに記事をポストしてみます。</p>
<h3 id="記事の作成"><a href="#記事の作成" class="headerlink" title="記事の作成"></a>記事の作成</h3><p>記事の作成にはhexoコマンドを使用します。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new post [記事のタイトル]</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>するとsorce/_post/配下に[記事のタイトル].mdファイルが作成されます。<br>次にこの.mdファイルをマークダウンで内容を記述します。<br>内容が書き終わったら、ビルトインサーバを立ち上げて、プレビューしてみましょう</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
<p>確認ができたら前回と同様にGithub Pageへ公開する際のコマンドを実行すると、新しく記事を公開することができます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>ここまでが記事を公開する流れになります。</p>
<h2 id="テーマのカスタマイズ"><a href="#テーマのカスタマイズ" class="headerlink" title="テーマのカスタマイズ"></a>テーマのカスタマイズ</h2><p>hexoにはたくさんテーマがありますが、基本的にどれも設定ファイルとEJSテンプレートを修正することでテーマを自分なりにカスタマイズすることができます。</p>
<p>ejsとはいうゆるテンプレートエンジンで設定ファイルから値を読み込み、HTMLを生成するために使用されます。他のテンプレートエンジンを使ったことがある人にはかなり学習コストも低くすぐに使いこなせると思います。</p>
<p>私が使用しているicarusの場合、layout.ejsでhtml全体の構成を、その中でそれぞれの要素のejsをインクルードしています。変更したいejsファイルにそれぞれ修正を入れました。</p>
<p>細かい修正内容は省くとして、大まかな部分は設定ファイルの_config.ymlを修正すればいいだけなので、非常に簡単です。</p>
<p>今後自身のブログを始めたいという方にhexoを検討してみるものいいかもしれません。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexoでブログをはじめてみた中編]]></title>
      <url>http://devlog.site/hexo/Hexo-Blog-Start-2/</url>
      <content type="html"><![CDATA[<p><a href="http://devlog.site/2016/hexo/Hexo-Blog-Start/">Hexoでブログをはじめてみた-前編</a>の続きです。</p>
<p>ビルトインサーバでブログを立ち上げることができたと思います。<br>次にGithub Pagesへブログを公開してみましょう。</p>
<h3 id="設定ファイルの修正とプラグインのインストール"><a href="#設定ファイルの修正とプラグインのインストール" class="headerlink" title="設定ファイルの修正とプラグインのインストール"></a>設定ファイルの修正とプラグインのインストール</h3><p>Github Pagesへの公開には設定ファイルの修正が必要です。<br>_config.ymlファイルを修正します。<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim _config.yml</div><div class="line"></div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:&lt;アカウント名&gt;/&lt;アカウント名&gt;gituhub.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>設定ファイルの修正が終わったらGithubデプロイ用のプラグインをインストールします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h2 id="Github-Pagesに公開"><a href="#Github-Pagesに公開" class="headerlink" title="Github Pagesに公開"></a>Github Pagesに公開</h2><p>ここまで終わったらあとはデプロイするだけです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>このコマンドを叩くと1発でGithub Pagesに公開することができます。</p>
<h2 id="テーマの変更"><a href="#テーマの変更" class="headerlink" title="テーマの変更"></a>テーマの変更</h2><p>Github Pagesへの公開はできましたが、このままだとHexoデフォルトのテーマのままなので変更してみたいと思います。<br>今回はGithubに公開せれている<a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank" rel="external">hexo-theme-icarus</a>を使用してみました。<br>テーマはGithubに公開されているもの多いので気に入ったもので試してみて下さい。</p>
<p>まずGitからcloneしてきます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@github.com:ppoffice/hexo-theme-icarus.git theme/icarus</div></pre></td></tr></table></figure>
<p>clone後、icarus内の設定ファイルをリネイムします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd theme/icarus</div><div class="line">mv \_config.yml.example _config.yml</div></pre></td></tr></table></figure>
<p>次にHexoの設定ファイルを編集します。<br>設定ファイルのthemeを書き換えます。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: icarus</div></pre></td></tr></table></figure>
<p>themeをデフォルトのlandscapeからicarusへ変更します。<br>ここまで終わったら1度Githubへデプロイします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>これでテーマが変わっていることが確認できると思います。<br>今回はここまでで、次回は記事の作成とテーマのカスタマイズを行います。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexoでブログをはじめてみた前編]]></title>
      <url>http://devlog.site/hexo/Hexo-Blog-Start/</url>
      <content type="html"><![CDATA[<p>自身の勉強と草を生やす為にHexoとGithub Pagesを使ってブログを書くことにしました。<br>早速、ブログの立ち上げ方をブログに書きたいと思います。<br>まずはローカルでHexoのビルトインサーバの立ち上げまでを行います。</p>
<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>必要なものとして</p>
<ul>
<li>Git</li>
<li>Githubアカウント</li>
<li>Github Pages</li>
</ul>
<p>上記は既に持っている前提です。<br><a id="more"></a></p>
<h2 id="Hexoの導入"><a href="#Hexoの導入" class="headerlink" title="Hexoの導入"></a>Hexoの導入</h2><h3 id="nvmインストール"><a href="#nvmインストール" class="headerlink" title="nvmインストール"></a>nvmインストール</h3><p>HexoはNode.jsなので、まずはNodeのインストールを行います。<br>Nodeのバージョン管理に便利なnvmを先にインストールします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">⋊&gt; ~ git clone git://github.com/creationix/nvm.git ~/.nvm/</div></pre></td></tr></table></figure>
<p>クローンが終わったら</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">⋊&gt; ~ source ~/.nvm/nvm.sh</div></pre></td></tr></table></figure>
<p>bashで叩かないとエラーが出るかもしれません。普段使ってるfishだとエラーが出ました。</p>
<h3 id="Nodeのインストール"><a href="#Nodeのインストール" class="headerlink" title="Nodeのインストール"></a>Nodeのインストール</h3><p>インストールできるNodeのバージョンを確認をします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">nvm ls-remote</div><div class="line">v0.1.14</div><div class="line">v0.1.15</div><div class="line">v0.1.16</div><div class="line">v0.1.17</div><div class="line">v0.1.18</div><div class="line">v0.1.19</div><div class="line">...</div></pre></td></tr></table></figure>
<p>私はこの当時最新だった4.6.2をインストールしました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm install 4.6.2</div></pre></td></tr></table></figure>
<p>無事インストールが終わりました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">v4.6.2</div></pre></td></tr></table></figure>
<h3 id="Hexoのインストール"><a href="#Hexoのインストール" class="headerlink" title="Hexoのインストール"></a>Hexoのインストール</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure>
<p>Hexoのインストールはこれで終了です。簡単！</p>
<h2 id="Hexoでブログを作ってみる"><a href="#Hexoでブログを作ってみる" class="headerlink" title="Hexoでブログを作ってみる"></a>Hexoでブログを作ってみる</h2><p>Hexoのインストールができたらブログを立ち上げてみましょう<br>今回はmyBlogという名前でブログを作成しました。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init myBlog</div></pre></td></tr></table></figure>
<p>これで新規作成できました。<br>その後はディレクトリを移動し初期化を行います。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd myBlog</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>そしてローカルでサーバを立ち上げてみると</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
<p><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> にアクセスすると、Hexoブログが表示されていることが確認できると思います。<br>ここまででHexoブログの立ち上げ方</p>
]]></content>
    </entry>
    
  
  
</search>
