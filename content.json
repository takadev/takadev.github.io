{"meta":{"title":"Devlog","subtitle":null,"description":null,"author":"Takahiro Kaneko","url":"http://devlog.site"},"pages":[],"posts":[{"title":"TensorFlowの基礎","slug":"tensorflow3","date":"2016-11-23T15:00:00.000Z","updated":"2016-11-23T15:45:39.000Z","comments":true,"path":"tensorflow/tensorflow3/","link":"","permalink":"http://devlog.site/tensorflow/tensorflow3/","excerpt":"TensorFlow基礎今回はTensorFlowの計算処理の流れを見ていきたいと思います。 TensorFlowの計算処理の流れ前回のTensorFlowで四則演算をやってみたでも少しだけ書きましたが、ざっくりオペレーションを先に定義し、セッションを使用してそれを実行するという流れになります。このオペレーションやセッションとはどんなものなんでしょうか？","content":"TensorFlow基礎今回はTensorFlowの計算処理の流れを見ていきたいと思います。 TensorFlowの計算処理の流れ前回のTensorFlowで四則演算をやってみたでも少しだけ書きましたが、ざっくりオペレーションを先に定義し、セッションを使用してそれを実行するという流れになります。このオペレーションやセッションとはどんなものなんでしょうか？ もう少し詳しく調べてみると、TensorFlowでは計算処理にグラフを用いるとのことです。グラフというのはエクセルとかでよく見る折れ線グラフや円グラフのことではなく、こちらのwikiのグラフ理論のことらしいです。 グラフはノードとエッジから構成されるデータ構造のことです。またTensorFlowにおいてのノードはop(オペレーション)と呼ばれ、どうやら一つの計算処理に対応しているとのこと。オペレーションというのは簡単に言うと何かしらの計算処理を行う一つの処理ブロックということのようです。 このopはTensor(テンソル)と呼ばれる行列形式のデータを受け取り、何かしらの計算処理を行い、結果を次のopへ渡していきます。次のopでも受け取った行列形式のデータを使用し、同じように計算処理を行いさらに次のopへ結果を渡します。このように次々にopにデータを受け渡し計算処理を行うことで、最終的な結果を得ることができるという流れです。 次に先ほど出てきたエッジについてです。エッジはノードとノードを繋ぐものでデータをどのノードからどのノードへ受け渡すかを決めるものです。単純にノードで処理した結果を次にどのノードで処理されるかというだけのようですね。 最後にセッションについてです。TensorFlowでは各opごとにCPUコアやGPUコアのリソースをどの程度割り当てるかを指定することができます。パワーを必要とする計算処理には多くのリソースを割り当て、簡単な処理には少ないリソースで済ませるという割り振りができるようでうす。この割り当てを担うのがセッションのようです。そしてセッションは各opの実行も行います。 簡単なコードを見てみましょう。 1234567891011121314151617181920import tensorflow as tf# 定数の定義const = tf.constant(2)const1 = tf.constant(3)const2 = tf.constant(4)# add_opノード(op)を定義add_op = tf.add(const, const1)# add_op1ノード(op)を定義、同時にadd_opの結果をadd_op1へ受け渡すエッジadd_op1 = tf.add(add_op, const2)# セッションsess = tf.Session()# add_opの実行sess.run(add_op)# add_op1の実行、結果をresultへ格納result = sess.run(add_op1)print(result) 足し算を2回行うだけの処理です。実行すると9が出力されると思います。コメントでコード中に注釈を入れているのでわかると思いますが、それぞれがノード(op)、エッジ、セッションになります。 これをtensorboardでグラフ出力してみるとこんな感じになります。 オペレーションAddとAdd_1がエッジで繋がれ、AddにはConst、Const_1が、Add_1にはConst_2が入力として渡されているのがわかりますね。なんとなくTensorFlowの計算処理の流れがわかった気がします！ TensorBoardについて先ほど出てきたTensorBoardとは何かというと、TensorFlowに搭載されている可視化ツールのことです。TensorBoardを使用することでグラフを可視化でき、ブラウザで確認することができます。 TensorBoardでグラフ出力するには以下のコードを追加します。 1tf.train.SummaryWriter(&apos;./&apos;, sess.graph) 追記したファイルを実行するとTensorBoard用のファイルが生成されます。TensorBoard用のファイルが生成されたら、次のコマンドを実行します。 1tensorboard --logdir=[TensorBoard用のファイルがあるディレクトリ] ブラウザでlocalhost:6006にアクセスするとTensorBoardが立ち上がっていることが確認できると思います。TensorBoardは便利な使い方が色々あるみたいなので今後もっと詳しく調べてみたいと思います。 今回はここまでです。次回はTensorFlowを使う上でもっと基本的な機械学習とは何かについて学んでいこうと思います。","categories":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://devlog.site/categories/tensorflow/"}],"tags":[{"name":"TensorFlow","slug":"TensorFlow","permalink":"http://devlog.site/tags/TensorFlow/"},{"name":"python","slug":"python","permalink":"http://devlog.site/tags/python/"},{"name":"機械学習","slug":"機械学習","permalink":"http://devlog.site/tags/機械学習/"}]},{"title":"TensorFlowで四則演算をやってみた","slug":"tensorflow2","date":"2016-11-22T15:00:00.000Z","updated":"2016-11-23T06:12:35.000Z","comments":true,"path":"tensorflow/tensorflow2/","link":"","permalink":"http://devlog.site/tensorflow/tensorflow2/","excerpt":"TensorFlowで四則演算をやってみた前回環境を整えたので、今回はTensorFlowで四則演算を行ってみました。 はじめにTensorFlow全くの初心者ですので、右も左もわかってません。間違ったこともたくさん書いてると思います。基本的に自分の為にメモしておく程度なのであしからずです。 四則演算まずはTensorFlowで四則演算を行ってみたいと思います。こんな感じのコードになります。","content":"TensorFlowで四則演算をやってみた前回環境を整えたので、今回はTensorFlowで四則演算を行ってみました。 はじめにTensorFlow全くの初心者ですので、右も左もわかってません。間違ったこともたくさん書いてると思います。基本的に自分の為にメモしておく程度なのであしからずです。 四則演算まずはTensorFlowで四則演算を行ってみたいと思います。こんな感じのコードになります。 1234567891011121314151617181920212223242526272829import tensorflow as tf# 定数宣言const1 = tf.constant(2)const2 = tf.constant(3)# 足し算オペレーションadd_op = tf.add(const1, const2)# セッションオブジェクトsess = tf.Session()result = sess.run(add_op)print(result)# 引き算オペレーションsub_op = tf.sub(const1, const2)result = sess.run(sub_op)print(result)# 掛け算オペレーションmul_op = tf.mul(const1, const2)result = sess.run(mul_op)print(result)# 割り算オペレーションdiv_op = tf.div(const1, const2)result = sess.run(div_op)print(result) これを適当な名前(今回はmath.py)で保存して実行すると 12345python math.py5-160 と出力されます。普通の四則演算のコードと全然違いますよね。1つずつ解説していきましょう。 1行目 1import tensorflow as tf これはtensorflow moduleをインポートして、それをtfとして使用するということです。 4行目 1const1 = tf.constant(2) const1という定数を宣言し、その定数に2を設定しています。 8行目 1add_op = tf.add(const1, const2) const1とconst2を足し算するオペーレションadd_opを設定 11行目 1sess = tf.Session() セッションの作成 13行目 1result = sess.run(add_op) 定義したオペレーションの実行 足し算以降の引き算、掛け算、割り算はやってることは同じです。とこのように、TensorFlowでは最初に演算するオペレーションを定義し、その後でセッションを使用してその演算を行うという流れになります。基本的な概念は一旦置いておいて、ざっとこんな感じのようです。 ところで気になった方もいるかもしれませんが、割り算の結果が0になってしまっていますね。2 / 3 なので0.666…になるはず？ですよね。いえ、これは間違いではなく、正しい結果です。tf.divはリファレンスを見てみると テンソルの数値型がint等の浮動小数でない型である場合、小数点以下切り捨て となっているので小数点以下が切り捨てられてしまって0になっているんですね。 小数点以下を切り捨てたくない場合はtf.truedivを使用してます。 123div_op = tf.truediv(const1, const2)result = sess.run(div_op)print(result) こうすることで正しく0.666…が出力されます。 次回は基礎的な概念を少し学んでみたいと思います。","categories":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://devlog.site/categories/tensorflow/"}],"tags":[{"name":"TensorFlow","slug":"TensorFlow","permalink":"http://devlog.site/tags/TensorFlow/"},{"name":"python","slug":"python","permalink":"http://devlog.site/tags/python/"},{"name":"機械学習","slug":"機械学習","permalink":"http://devlog.site/tags/機械学習/"}]},{"title":"TensorFlowの環境を作ってみた","slug":"tensorflow1","date":"2016-11-21T15:00:00.000Z","updated":"2016-11-23T05:43:16.000Z","comments":true,"path":"tensorflow/tensorflow1/","link":"","permalink":"http://devlog.site/tensorflow/tensorflow1/","excerpt":"TensorFlowの環境を作ってみた機械学習の勉強を始めようと思い、今回はTensorFlowの環境を作成してみました。 前提私の環境はmacでOS X El Capitanです。まだmacOS Sierraにはあげてません…TensorFlowのバージョンは0.10を使用します。HomeBrewを使用しますので予めインストールしておいて下さい。","content":"TensorFlowの環境を作ってみた機械学習の勉強を始めようと思い、今回はTensorFlowの環境を作成してみました。 前提私の環境はmacでOS X El Capitanです。まだmacOS Sierraにはあげてません…TensorFlowのバージョンは0.10を使用します。HomeBrewを使用しますので予めインストールしておいて下さい。 pythonのインストールTensorFlowではpythonを使用するので事前にインストールしておきます。macには一応デフォルトでpythonがインストールされえていますが、TensorFlow用に別バージョンのpythonを使用したいと思います。インストールにはバージョン管理が便利なpyenvを使用しますので先にこちらをインストールしておきます。 1brew install pyenv ~/.bash_profileに以下を追加します。 12export PATH=&quot;$HOME/.pyenv/bin:$PATH&quot;eval &quot;$(pyenv init -)&quot; pyenvのインストールが終わったら現在使用されているpythonを確認してみましょう 12pyenv versions* system (set by /Users/hoge/.pyenv/version) macのデフォルトのpythonになっていますね。それではpythonをインストールしてみましょう。今回は2.7.11と3.5.1をインストールしてみます。 12pyenv install 2.7.11pyenv install 3.5.1 インストールが終わったら、対象のバージョンが追加されているか確認してみましょう。 1234pyenv versions* system (set by /Users/hoge/.pyenv/version) 2.7.11 3.5.1 2.7.11と3.5.1が追加されていることがわかりますね。ただしこのままだとmacにデフォルトで入っているpythonを使用する設定になっていますのでバージョンの切り替えを行います。 12345pyenv global 2.7.11pyenv versions system* 2.7.11 (set by /Users/hoge/.pyenv/version) 3.5.1 globalでバージョンの切り替えを行うことができます。systemに付いていた✳︎マークが2.7.11のところに付いているのがわかると思います。これで2.7.11へ切り替わりました。 pyenv-virtualenvのインストール今回はTensorFlow用の仮想環境を作成してその上でTensorFlowを動かしてみたいと思います。仮想環境作成に便利なpyenv-virtualenvを使用します。まずはインストールから。 1brew install pyenv-virtualenv インストールはbrewコマンドで1発で済みます。楽チンですね。 仮想環境の作成pyenv-virtualenvのインストールが終わったら早速、仮想環境を作成してみたいと思います。 1pyenv virtualenv [pyenvのバージョン] [仮想環境名] このコマンドで仮想環境が作れます。今回はTensorFlowのバージョン0.10を使用するので仮想環境名はtensorflow0.10として作成してみます。 1pyenv virtualenv 2.7.11 tensorflow0.10 作成が終わったらpyenv versionsコマンドをた実行してみましょう 123456pyenv versions system* 2.7.11 (set by /Users/hoge/.pyenv/version) 2.7.11/envs/tensorflow0.10 3.5.1 tensorflow0.10 2.7.11/envs/tensorflow0.10とtensorflow0.10が追加されていることがわかりますね。pyenv globalコマンドでバージョンを切り替えましょう 1pyenv global tensorflow0.10 ここまでで仮想環境の作成が終了です。仮想環境へ入るにはアクティベートコマンドを実行します。 1pyenv activate これで仮想環境へ入ることができます。仮想環境から出る場合は以下のコマンドを実行します。 1pyenv deactivate TensorFlowのインストールここからは先ほど作成した仮装環境上で行って下さい。TensorFlowのインストールにはPyPIを使用します。PyPIはPythonのパッケージ管理ツールで、今回使用するpython2.7.11にはデフォルトでインストールされています。コマンドはpipになります。 12pip -Vpip 9.0.1 from /Users/hoge/.pyenv/versions/2.7.11/envs/tensorflow0.10/lib/python2.7/site-packages (python 2.7) PyPIを使用してTensorFlowをインストールするのですが、TensorFlowはPyPIのパッケージには登録されていないのでURLを指定してインストールを行います。 またTensorFlowにはPC環境に応じたバージョンがいくつかあり、ご自身のPC環境に応じたバージョンを使用して下さい。TensorFlow Pip installationこちらから確認できます。 PC環境の違いはGPUがあるかないか、OSはLinuxかMacか、pythonは2.7か3.4もしくは3.5かといった違いです。私の場合はGPUなし、Mac、python2.7になりますので以下のようにインストールを行いました。 12export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.10.0-py2-none-any.whlpip install --upgrade $TF_BINARY_URL これでTensorFlowのインストールは終了です。 TensorFlowの動作確認動作確認は公式サイトにもあるようにコマンドラインからpythonコマンドで行います。 123456789101112$ python...&gt;&gt;&gt; import tensorflow as tf&gt;&gt;&gt; hello = tf.constant(&apos;Hello, TensorFlow!&apos;)&gt;&gt;&gt; sess = tf.Session()&gt;&gt;&gt; print(sess.run(hello))Hello, TensorFlow!&gt;&gt;&gt; a = tf.constant(10)&gt;&gt;&gt; b = tf.constant(32)&gt;&gt;&gt; print(sess.run(a + b))42&gt;&gt;&gt; これで無事にTensorFlowが動作していることが確認できました。今後はこのTensorFlowで遊んでみたいと思います。","categories":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://devlog.site/categories/tensorflow/"}],"tags":[{"name":"TensorFlow","slug":"TensorFlow","permalink":"http://devlog.site/tags/TensorFlow/"},{"name":"python","slug":"python","permalink":"http://devlog.site/tags/python/"},{"name":"機械学習","slug":"機械学習","permalink":"http://devlog.site/tags/機械学習/"}]},{"title":"Hexoでブログをはじめてみた後編","slug":"Hexo-Blog-Start-3","date":"2016-11-20T15:00:00.000Z","updated":"2016-11-23T05:44:07.000Z","comments":true,"path":"hexo/Hexo-Blog-Start-3/","link":"","permalink":"http://devlog.site/hexo/Hexo-Blog-Start-3/","excerpt":"Hexoでブログをはじめてみた-中編の続きです。 Github Pagesにブログを公開できたら過ぎに記事をポストしてみます。 記事の作成記事の作成にはhexoコマンドを使用します。 1hexo new post [記事のタイトル]","content":"Hexoでブログをはじめてみた-中編の続きです。 Github Pagesにブログを公開できたら過ぎに記事をポストしてみます。 記事の作成記事の作成にはhexoコマンドを使用します。 1hexo new post [記事のタイトル] するとsorce/_post/配下に[記事のタイトル].mdファイルが作成されます。次にこの.mdファイルをマークダウンで内容を記述します。内容が書き終わったら、ビルトインサーバを立ち上げて、プレビューしてみましょう 1hexo s 確認ができたら前回と同様にGithub Pageへ公開する際のコマンドを実行すると、新しく記事を公開することができます。 1hexo d -g ここまでが記事を公開する流れになります。 テーマのカスタマイズhexoにはたくさんテーマがありますが、基本的にどれも設定ファイルとEJSテンプレートを修正することでテーマを自分なりにカスタマイズすることができます。 ejsとはいうゆるテンプレートエンジンで設定ファイルから値を読み込み、HTMLを生成するために使用されます。他のテンプレートエンジンを使ったことがある人にはかなり学習コストも低くすぐに使いこなせると思います。 私が使用しているicarusの場合、layout.ejsでhtml全体の構成を、その中でそれぞれの要素のejsをインクルードしています。変更したいejsファイルにそれぞれ修正を入れました。 細かい修正内容は省くとして、大まかな部分は設定ファイルの_config.ymlを修正すればいいだけなので、非常に簡単です。 今後自身のブログを始めたいという方にhexoを検討してみるものいいかもしれません。","categories":[{"name":"Hexo","slug":"hexo","permalink":"http://devlog.site/categories/hexo/"}],"tags":[{"name":"Hexo","slug":"hexo","permalink":"http://devlog.site/tags/hexo/"}]},{"title":"Hexoでブログをはじめてみた中編","slug":"Hexo-Blog-Start-2","date":"2016-11-19T15:00:00.000Z","updated":"2016-11-23T05:43:54.000Z","comments":true,"path":"hexo/Hexo-Blog-Start-2/","link":"","permalink":"http://devlog.site/hexo/Hexo-Blog-Start-2/","excerpt":"Hexoでブログをはじめてみた-前編の続きです。 ビルトインサーバでブログを立ち上げることができたと思います。次にGithub Pagesへブログを公開してみましょう。 設定ファイルの修正とプラグインのインストールGithub Pagesへの公開には設定ファイルの修正が必要です。_config.ymlファイルを修正します。","content":"Hexoでブログをはじめてみた-前編の続きです。 ビルトインサーバでブログを立ち上げることができたと思います。次にGithub Pagesへブログを公開してみましょう。 設定ファイルの修正とプラグインのインストールGithub Pagesへの公開には設定ファイルの修正が必要です。_config.ymlファイルを修正します。 123456vim _config.ymldeploy: type: git repo: git@github.com:&lt;アカウント名&gt;/&lt;アカウント名&gt;gituhub.io.git branch: master 設定ファイルの修正が終わったらGithubデプロイ用のプラグインをインストールします。 1npm install hexo-deployer-git --save Github Pagesに公開ここまで終わったらあとはデプロイするだけです。 1hexo d -g このコマンドを叩くと1発でGithub Pagesに公開することができます。 テーマの変更Github Pagesへの公開はできましたが、このままだとHexoデフォルトのテーマのままなので変更してみたいと思います。今回はGithubに公開せれているhexo-theme-icarusを使用してみました。テーマはGithubに公開されているもの多いので気に入ったもので試してみて下さい。 まずGitからcloneしてきます。 1git clone git@github.com:ppoffice/hexo-theme-icarus.git theme/icarus clone後、icarus内の設定ファイルをリネイムします。 12cd theme/icarusmv _config.yml.example _config.yml 次にHexoの設定ファイルを編集します。設定ファイルのthemeを書き換えます。 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icarus themeをデフォルトのlandscapeからicarusへ変更します。ここまで終わったら1度Githubへデプロイします。 1hexo d -g これでテーマが変わっていることが確認できると思います。今回はここまでで、次回は記事の作成とテーマのカスタマイズを行います。","categories":[{"name":"Hexo","slug":"hexo","permalink":"http://devlog.site/categories/hexo/"}],"tags":[{"name":"Hexo","slug":"hexo","permalink":"http://devlog.site/tags/hexo/"}]},{"title":"Hexoでブログをはじめてみた前編","slug":"Hexo-Blog-Start","date":"2016-11-19T12:54:03.000Z","updated":"2016-11-24T15:01:35.000Z","comments":true,"path":"hexo/Hexo-Blog-Start/","link":"","permalink":"http://devlog.site/hexo/Hexo-Blog-Start/","excerpt":"自身の勉強と草を生やす為にHexoとGithub Pagesを使ってブログを書くことにしました。早速、ブログの立ち上げ方をブログに書きたいと思います。まずはローカルでHexoのビルトインサーバの立ち上げまでを行います。 はじめに必要なものとして Git Githubアカウント Github Pages 上記は既に持っている前提です。","content":"自身の勉強と草を生やす為にHexoとGithub Pagesを使ってブログを書くことにしました。早速、ブログの立ち上げ方をブログに書きたいと思います。まずはローカルでHexoのビルトインサーバの立ち上げまでを行います。 はじめに必要なものとして Git Githubアカウント Github Pages 上記は既に持っている前提です。 Hexoの導入nvmインストールHexoはNode.jsなので、まずはNodeのインストールを行います。Nodeのバージョン管理に便利なnvmを先にインストールします。 1⋊&gt; ~ git clone git://github.com/creationix/nvm.git ~/.nvm/ クローンが終わったら 1⋊&gt; ~ source ~/.nvm/nvm.sh bashで叩かないとエラーが出るかもしれません。普段使ってるfishだとエラーが出ました。 NodeのインストールインストールできるNodeのバージョンを確認をします。 12345678nvm ls-remotev0.1.14v0.1.15v0.1.16v0.1.17v0.1.18v0.1.19... 私はこの当時最新だった4.6.2をインストールしました。 1nvm install 4.6.2 無事インストールが終わりました。 12node -vv4.6.2 Hexoのインストール1npm install -g hexo Hexoのインストールはこれで終了です。簡単！ Hexoでブログを作ってみるHexoのインストールができたらブログを立ち上げてみましょう今回はmyBlogという名前でブログを作成しました。 1hexo init myBlog これで新規作成できました。その後はディレクトリを移動し初期化を行います。 12cd myBlognpm install そしてローカルでサーバを立ち上げてみると 1hexo s http://localhost:4000 にアクセスすると、Hexoブログが表示されていることが確認できると思います。ここまででHexoブログの立ち上げ方","categories":[{"name":"Hexo","slug":"hexo","permalink":"http://devlog.site/categories/hexo/"}],"tags":[{"name":"Hexo","slug":"hexo","permalink":"http://devlog.site/tags/hexo/"}]}]}